exports.__esModule = true;
var event_1 = require("@drozdik.m/event");
var window_events_1 = require("@drozdik.m/window-events");
var dimensions_helper_1 = require("@drozdik.m/dimensions-helper");
//--------------------------------------------------
//----------DIALOG WINDOW---------------------------
//--------------------------------------------------
var DialogWindow = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    /**
     * New dialog window with data bindings
     * @param dialogId
     */
    function DialogWindow(dialogId) {
        //--------------------------------------------------
        //----------PROPERTIES------------------------------
        //--------------------------------------------------
        //Variables
        this.dialogId = "";
        this.opened = false;
        this.animationTimeout = -1;
        //Events
        this.OnOpen = new event_1.Event();
        this.OnClose = new event_1.Event();
        this.OnUpdate = new event_1.Event();
        this.OnBeforeUpdate = new event_1.Event();
        this.dialogId = dialogId;
        //Element existance check
        this.dialogContent = document.getElementById(this.dialogId);
        if (!this.dialogContent) {
            console.error("DialogWindow(#" + dialogId + ") - element not found");
            return;
        }
        //Dimensions helper
        this.contentDimensionsHelper = new dimensions_helper_1.DimensionsHelper(this.dialogContent);
        //Transform a div into dialog window
        this.DialogWindowfy(document.getElementById(this.dialogId));
        //On click action
        var object = this;
        document.querySelectorAll("[data-dialog-id=\"" + dialogId + "\"]").forEach(function (element) {
            element.addEventListener("click", function () {
                object.Open();
            });
        });
        //Dialog close action
        this.dialogWrapper.querySelectorAll(".dialogClose").forEach(function (element) {
            element.addEventListener("click", function () {
                object.Close();
            });
        });
        //Dialog update
        window_events_1.WindowEvents.OnResize.Add(function () {
            object.Update();
        });
        window_events_1.WindowEvents.OnDOMReady.Add(function () {
            object.Update();
        });
        window_events_1.WindowEvents.OnLoad.Add(function () {
            object.Update();
        });
        object.Update();
    }
    DialogWindow.prototype.IsOpened = function () { return this.opened; };
    //--------------------------------------------------
    //----------METHODS---------------------------------
    //--------------------------------------------------
    /**
     * Transform a div into dialog window
     * @param element Target element
     */
    DialogWindow.prototype.DialogWindowfy = function (element) {
        var wrappingElement = document.createElement("div");
        wrappingElement.classList.add("dialogWindow");
        var dialogBackground = document.createElement("div");
        dialogBackground.innerHTML = "&nbsp";
        dialogBackground.classList.add("dialogBackground");
        dialogBackground.classList.add("dialogClose");
        var dialogCross = document.createElement("div");
        dialogCross.classList.add("dialogCross");
        dialogCross.classList.add("dialogClose");
        var line1 = document.createElement("div");
        line1.classList.add("line");
        line1.classList.add("line1");
        line1.innerHTML = "&nbsp;";
        var line2 = document.createElement("div");
        line2.classList.add("line");
        line2.classList.add("line2");
        line2.innerHTML = "&nbsp;";
        dialogCross.appendChild(line1);
        dialogCross.appendChild(line2);
        wrappingElement.appendChild(dialogBackground);
        element.insertAdjacentElement("afterbegin", dialogCross);
        element.classList.add("dialogContent");
        element.parentElement.insertAdjacentElement("afterbegin", wrappingElement);
        wrappingElement.appendChild(element);
        this.dialogWrapper = wrappingElement;
    };
    /**
    * Opens the dialog window
    */
    DialogWindow.prototype.Open = function () {
        var object = this;
        //Change opened bool
        this.opened = true;
        //Show
        this.dialogWrapper.style.display = "block";
        if (this.animationTimeout == -1) {
            clearTimeout(this.animationTimeout);
            this.animationTimeout = -1;
        }
        //Add open class
        setTimeout(function () {
            object.dialogWrapper.classList.add("opened");
        }, 1);
        //Update sizes
        this.Update();
        //Callback
        this.OnOpen.Invoke(this, null);
    };
    /**
    * Closes the dialog window
    */
    DialogWindow.prototype.Close = function () {
        //Remove open class
        this.dialogWrapper.classList.remove("opened");
        //Change opened bool
        this.opened = false;
        //Callback
        this.OnClose.Invoke(this, null);
        //Run animation
        var object = this;
        if (this.animationTimeout == -1) {
            clearTimeout(this.animationTimeout);
            this.animationTimeout = -1;
        }
        this.animationTimeout = setTimeout(function () {
            object.dialogWrapper.style.display = "none";
            this.animationTimeout = -1;
        }, 250);
    };
    /**
    * Resizes and updates the dialog window
    */
    DialogWindow.prototype.Update = function () {
        //No need for update is dialog window is closed
        if (!this.opened)
            return;
        //Remove max height
        this.dialogContent.style.maxHeight = "unset";
        //Callback
        this.OnBeforeUpdate.Invoke(this, null);
        //Get needed variables
        var dialogWrapperComputedStyle = getComputedStyle(this.dialogWrapper);
        var dialogContentHeight = this.contentDimensionsHelper.Height();
        var dialogPaddingTop = parseInt(dialogWrapperComputedStyle.paddingTop);
        var dialogPaddingBottom = parseInt(dialogWrapperComputedStyle.paddingBottom);
        var dialogContentComputedStyle = getComputedStyle(this.dialogContent);
        var contentPaddingTop = parseInt(dialogContentComputedStyle.paddingTop);
        var contentPaddingBottom = parseInt(dialogContentComputedStyle.paddingBottom);
        var windowHeight = window_events_1.WindowEvents.Height();
        var freeSpaceHeight = windowHeight - dialogContentHeight - dialogPaddingTop - dialogPaddingBottom;
        var maxHeight = windowHeight - dialogPaddingTop - dialogPaddingBottom - contentPaddingTop - contentPaddingBottom;
        //Is there any free space?
        if (freeSpaceHeight > 0) {
            //Remove overflow class
            this.dialogWrapper.classList.remove("dialogScreenOverflow");
            //Add offset top
            var offsetTop = freeSpaceHeight / 3;
            this.dialogContent.style.top = offsetTop + "px";
        }
        else {
            //Add overflow class
            this.dialogWrapper.classList.add("dialogScreenOverflow");
            //Remove offset top
            this.dialogContent.style.top = "0";
        }
        //Calculate new max-height
        this.dialogContent.style.maxHeight = maxHeight + "px";
        //Callback
        this.OnUpdate.Invoke(this, null);
    };
    return DialogWindow;
}());
exports.DialogWindow = DialogWindow;
