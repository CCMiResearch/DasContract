exports.__esModule = true;
var unit_test_1 = require("@drozdik.m/unit-test");
var Queue_1 = require("../src/Queue");
var unitTest = new unit_test_1.UnitTest("Queue");
unitTest.AddTestCase("Push, Front, Back", function () {
    var queue1 = new Queue_1.Queue();
    unit_test_1.Assert.IsNull(queue1.Front());
    unit_test_1.Assert.IsNull(queue1.Back());
    queue1.Enqueue(0);
    unit_test_1.Assert.AreEqual(0, queue1.Front());
    unit_test_1.Assert.AreEqual(0, queue1.Back());
    queue1.Enqueue(1);
    unit_test_1.Assert.AreEqual(0, queue1.Front());
    unit_test_1.Assert.AreEqual(1, queue1.Back());
    queue1.Enqueue(2);
    unit_test_1.Assert.AreEqual(0, queue1.Front());
    unit_test_1.Assert.AreEqual(2, queue1.Back());
});
unitTest.AddTestCase("Pop", function () {
    var queue1 = new Queue_1.Queue();
    unit_test_1.Assert.IsNull(queue1.Front());
    unit_test_1.Assert.IsNull(queue1.Back());
    unit_test_1.Assert.IsNull(queue1.Dequeue());
    queue1.Enqueue(0);
    queue1.Enqueue(1);
    queue1.Enqueue(2);
    unit_test_1.Assert.AreEqual(0, queue1.Dequeue());
    unit_test_1.Assert.AreEqual(1, queue1.Dequeue());
    unit_test_1.Assert.AreEqual(2, queue1.Dequeue());
    unit_test_1.Assert.IsNull(queue1.Dequeue());
});
unitTest.AddTestCase("Clear", function () {
    var queue1 = new Queue_1.Queue();
    queue1.Enqueue(0);
    queue1.Enqueue(1);
    queue1.Enqueue(2);
    queue1.Clear();
    unit_test_1.Assert.IsNull(queue1.Front());
    unit_test_1.Assert.IsNull(queue1.Back());
    unit_test_1.Assert.IsNull(queue1.Dequeue());
});
unitTest.AddTestCase("Dispose", function () {
    var queue1 = new Queue_1.Queue();
    queue1.Enqueue(0);
    queue1.Enqueue(1);
    queue1.Enqueue(2);
    queue1.Dispose();
    unit_test_1.Assert.IsNull(queue1.Front());
    unit_test_1.Assert.IsNull(queue1.Back());
    unit_test_1.Assert.IsNull(queue1.Dequeue());
});
unitTest.AddTestCase("Count", function () {
    var queue1 = new Queue_1.Queue();
    unit_test_1.Assert.AreEqual(0, queue1.Count());
    queue1.Enqueue(0);
    unit_test_1.Assert.AreEqual(1, queue1.Count());
    queue1.Enqueue(1);
    unit_test_1.Assert.AreEqual(2, queue1.Count());
    queue1.Enqueue(2);
    unit_test_1.Assert.AreEqual(3, queue1.Count());
});
unitTest.AddTestCase("Clone", function () {
    var queue1 = new Queue_1.Queue();
    queue1.Enqueue(0);
    queue1.Enqueue(1);
    queue1.Enqueue(2);
    var queue2 = queue1.Clone();
    unit_test_1.Assert.AreEqual(0, queue1.Dequeue());
    unit_test_1.Assert.AreEqual(1, queue1.Dequeue());
    unit_test_1.Assert.AreEqual(2, queue1.Dequeue());
    unit_test_1.Assert.IsNull(queue1.Dequeue());
    unit_test_1.Assert.AreEqual(0, queue2.Dequeue());
    unit_test_1.Assert.AreEqual(1, queue2.Dequeue());
    unit_test_1.Assert.AreEqual(2, queue2.Dequeue());
    unit_test_1.Assert.IsNull(queue2.Dequeue());
});
unitTest.AddTestCase("Clone, IClonable", function () {
    var FooCmp = /** @class */ (function () {
        function FooCmp(n) {
            this.number = n;
        }
        FooCmp.prototype.Clone = function () {
            return new FooCmp(this.number);
        };
        return FooCmp;
    }());
    var queue1 = new Queue_1.Queue();
    queue1.Enqueue(new FooCmp(0));
    queue1.Enqueue(new FooCmp(1));
    queue1.Enqueue(new FooCmp(2));
    var queue2 = queue1.Clone();
    queue1.Front().number = 10;
    unit_test_1.Assert.AreEqual(10, queue1.Dequeue().number);
    unit_test_1.Assert.AreEqual(1, queue1.Dequeue().number);
    unit_test_1.Assert.AreEqual(2, queue1.Dequeue().number);
    unit_test_1.Assert.IsNull(queue1.Dequeue());
    unit_test_1.Assert.AreEqual(0, queue2.Dequeue().number);
    unit_test_1.Assert.AreEqual(1, queue2.Dequeue().number);
    unit_test_1.Assert.AreEqual(2, queue2.Dequeue().number);
    unit_test_1.Assert.IsNull(queue2.Dequeue());
});
unitTest.AddTestCase("All in one", function () {
    //Numbers
    var queue1 = new Queue_1.Queue();
    for (var i = 0; i < 10; i++)
        queue1.Enqueue(i);
    unit_test_1.Assert.Assert(queue1.Back() === 9);
    unit_test_1.Assert.Assert(!queue1.IsEmpty());
    unit_test_1.Assert.Assert(queue1.Count() === 10);
    for (var i = 0; i < 10; i++) {
        unit_test_1.Assert.Assert(queue1.Front() === i);
        queue1.Dequeue();
    }
    unit_test_1.Assert.Assert(queue1.IsEmpty());
    for (var i = 0; i < 10; i++)
        queue1.Enqueue(i);
    unit_test_1.Assert.Assert(!queue1.IsEmpty());
    queue1.Clear();
    unit_test_1.Assert.Assert(queue1.IsEmpty());
    unit_test_1.Assert.Assert(queue1.Front() === null);
    unit_test_1.Assert.Assert(queue1.Back() === null);
    queue1.Enqueue(1);
    unit_test_1.Assert.Assert(queue1.Front() === 1);
    unit_test_1.Assert.Assert(queue1.Back() === 1);
    queue1.Dequeue();
    unit_test_1.Assert.Assert(queue1.IsEmpty());
    unit_test_1.Assert.Assert(queue1.Front() === null);
    unit_test_1.Assert.Assert(queue1.Back() === null);
    //Strings
    var queue2 = new Queue_1.Queue();
    for (var i = 0; i < 10; i++)
        queue2.Enqueue(i.toString());
    unit_test_1.Assert.Assert(queue2.Back() === "9");
    unit_test_1.Assert.Assert(!queue2.IsEmpty());
    unit_test_1.Assert.Assert(queue2.Count() === 10);
    for (var i = 0; i < 10; i++) {
        unit_test_1.Assert.Assert(queue2.Front() === i.toString());
        queue2.Dequeue();
    }
});
unitTest.Run();
