exports.__esModule = true;
var avl_tree_1 = require("@drozdik.m/avl-tree");
var KeyValuePair_1 = require("@drozdik.m/pair/dist/KeyValuePair");
var MapIterator_1 = require("./MapIterator");
var comparator_handler_1 = require("@drozdik.m/comparator-handler");
//import { AVLTreeIterator } from "@drozdik.m/avl-tree";
var Map = /** @class */ (function () {
    //private keyValueComparator: IComparator<KeyValuePair<K, V>>;
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    /**
     * Creates new instance of the object.
     * @param items Initial items in the binary search tree.
     * @param comparator Key Comparator - It automatically detects IComparable classes.
     */
    function Map(items, comparator) {
        if (items === void 0) { items = []; }
        if (comparator === void 0) { comparator = null; }
        //--------------------------------------------------
        //----------VARIABLES-------------------------------
        //--------------------------------------------------
        this.avlTree = null;
        var keyComp = new comparator_handler_1.ComparatorHandler(comparator);
        var keyValueComparator = function (item1, item2) {
            return keyComp.Compare(item1.Key(), item2.Key());
        };
        this.avlTree = new avl_tree_1.AVLTree(items, keyValueComparator);
    }
    //--------------------------------------------------
    //---------VALUE------------------------------------
    //--------------------------------------------------
    /**
     * Inserts new pair
     * @param item New pair
     */
    Map.prototype.InsertPair = function (item) {
        this.avlTree.Insert(item);
    };
    /**
     * Creates and inserts KeyValuePair based on inserted key and value
     * @param item
     */
    Map.prototype.InsertValue = function (key, value) {
        this.InsertPair(new KeyValuePair_1.KeyValuePair(key, value));
    };
    Map.prototype.Insert = function (item) {
        this.InsertPair(item);
    };
    /**
     * Finds a pair by given key and returns its iterator
     * @param item
     */
    Map.prototype.FindPair = function (item) {
        return new MapIterator_1.MapIterator(this.avlTree.Find(item));
    };
    /**
     * Finds value by key
     * @param key Key
     */
    Map.prototype.FindValue = function (key) {
        return new MapIterator_1.MapIterator(this.avlTree.Find(new KeyValuePair_1.KeyValuePair(key, null)));
    };
    Map.prototype.Find = function (item) {
        return this.FindValue(item.Key());
    };
    /**
     * Removes a pair by given iterator
     * @param iterator Iterator
     */
    Map.prototype.RemoveValueAt = function (iterator) {
        if (!iterator.HasValue())
            return;
        this.avlTree.RemoveAt(iterator.AVLTreeIterator());
    };
    Map.prototype.RemoveAt = function (iterator) {
        this.RemoveValueAt(iterator);
    };
    Map.prototype.Remove = function (item) {
        this.RemoveValue(item.Key());
    };
    /**
     * Removes a pair
     * @param item Pair to remove
     */
    Map.prototype.RemovePair = function (item) {
        this.avlTree.Remove(item);
    };
    /**
     * Removes a value by given key
     * @param key Key
     */
    Map.prototype.RemoveValue = function (key) {
        this.RemovePair(new KeyValuePair_1.KeyValuePair(key, null));
    };
    /**
     * Updates pair at given position
     * @param newValue New pair
     * @param iterator Iterator
     */
    Map.prototype.UpdatePairAt = function (newValue, iterator) {
        this.avlTree.UpdateAt(newValue, iterator.AVLTreeIterator());
    };
    /**
     * Sets new value on iterator position
     * @param newValue
     * @param iterator
     */
    Map.prototype.UpdateValueAt = function (newValue, iterator) {
        if (iterator.HasValue())
            iterator.Pair().SetValue(newValue);
    };
    Map.prototype.UpdateAt = function (newValue, iterator) {
        this.UpdateValueAt(newValue.Value(), iterator);
    };
    /**
     * Updates value at given key position
     * @param key Key
     * @param newValue New Value
     */
    Map.prototype.UpdateValue = function (key, newValue) {
        this.UpdateValueAt(newValue, this.FindValue(key));
    };
    Map.prototype.Update = function (oldValue, newValue) {
        this.UpdateValue(oldValue.Key(), newValue.Value());
    };
    //--------------------------------------------------
    //---------AT---------------------------------------
    //--------------------------------------------------
    Map.prototype.At = function (index) {
        return this.AtIterator(index).Pair();
    };
    Map.prototype.AtIterator = function (index) {
        return new MapIterator_1.MapIterator(this.avlTree.AtIterator(index));
    };
    //--------------------------------------------------
    //---------MIN-MAX----------------------------------
    //--------------------------------------------------
    Map.prototype.FindMin = function () {
        return new MapIterator_1.MapIterator(this.avlTree.FindMin());
    };
    Map.prototype.FindMax = function () {
        return new MapIterator_1.MapIterator(this.avlTree.FindMax());
    };
    //--------------------------------------------------
    //---------CLEARS-----------------------------------
    //--------------------------------------------------
    Map.prototype.Dispose = function () {
        this.avlTree.Dispose();
        this.avlTree = null;
    };
    Map.prototype.Clear = function () {
        this.avlTree.Clear();
    };
    //--------------------------------------------------
    //---------ITERATOR---------------------------------
    //--------------------------------------------------
    Map.prototype.First = function () {
        return new MapIterator_1.MapIterator(this.avlTree.First());
    };
    Map.prototype.Last = function () {
        return new MapIterator_1.MapIterator(this.avlTree.Last());
    };
    //--------------------------------------------------
    //---------CLONE------------------------------------
    //--------------------------------------------------
    Map.prototype.Clone = function () {
        var res = new Map();
        res.avlTree = this.avlTree.Clone();
        //res.keyValueComparator = this.keyValueComparator;
        return res;
    };
    //--------------------------------------------------
    //---------OTHERS-----------------------------------
    //--------------------------------------------------
    Map.prototype.Build = function (items) {
        this.avlTree.Build(items);
    };
    Map.prototype.Count = function () {
        return this.avlTree.Count();
    };
    Map.prototype.IsEmpty = function () {
        return this.avlTree.IsEmpty();
    };
    return Map;
}());
exports.Map = Map;
