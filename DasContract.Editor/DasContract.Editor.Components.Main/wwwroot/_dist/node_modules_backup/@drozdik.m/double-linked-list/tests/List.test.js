exports.__esModule = true;
var unit_test_1 = require("@drozdik.m/unit-test");
var List_1 = require("../src/List");
var unitTest = new unit_test_1.UnitTest("Double linked list");
unitTest.AddTestCase("Insert front", function () {
    var list1 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list1.InsertFront(i);
    var number = 0;
    for (var item = list1.First(); item.HasValue(); item.Next()) {
        unit_test_1.Assert.Assert(item.Value() === number);
        number++;
    }
    unit_test_1.Assert.Assert(number === 10);
    number = 9;
    for (var item = list1.Last(); item.HasValue(); item.Previous()) {
        unit_test_1.Assert.Assert(item.Value() === number);
        number--;
    }
    unit_test_1.Assert.Assert(number === -1);
});
unitTest.AddTestCase("Build", function () {
    var list1 = new List_1.List();
    list1.Build([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
    for (var item = list1.First(), i = 0; item.HasValue(); item.Next(), i++)
        unit_test_1.Assert.AreEqual(i, item.Value());
});
unitTest.AddTestCase("Insert back", function () {
    var number = 0;
    var list2 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list2.InsertBack(i);
    number = 9;
    for (var item = list2.First(); item.HasValue(); item.Next()) {
        unit_test_1.Assert.Assert(item.Value() === number);
        number--;
    }
    unit_test_1.Assert.Assert(number === -1);
    number = 0;
    for (var item = list2.Last(); item.HasValue(); item.Previous()) {
        unit_test_1.Assert.Assert(item.Value() === number);
        number++;
    }
    unit_test_1.Assert.Assert(number === 10);
});
unitTest.AddTestCase("Iterator", function () {
    var list3 = new List_1.List();
    for (var i = 0; i < 20; i++)
        list3.InsertFront(i);
    var listIterator1 = list3.First();
    listIterator1.Previous();
    unit_test_1.Assert.Assert(!listIterator1.HasValue());
    listIterator1 = list3.First();
    unit_test_1.Assert.Assert(listIterator1.Value() === 0);
    unit_test_1.Assert.Assert(listIterator1.HasValue());
    listIterator1.Previous();
    unit_test_1.Assert.Assert(!listIterator1.HasValue());
    listIterator1 = list3.Last();
    listIterator1.Previous();
    unit_test_1.Assert.Assert(listIterator1.Value() === 18);
    listIterator1.Next();
    unit_test_1.Assert.Assert(listIterator1.Value() === 19);
    listIterator1.Next();
    unit_test_1.Assert.Assert(listIterator1.Value() === null);
    unit_test_1.Assert.Assert(!listIterator1.HasValue());
});
unitTest.AddTestCase("Find", function () {
    var list4 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list4.InsertFront(i);
    var listIterator2 = list4.Find(9);
    unit_test_1.Assert.Assert(listIterator2.Value() === 9);
    unit_test_1.Assert.Assert(listIterator2.HasValue());
    listIterator2.Next();
    unit_test_1.Assert.Assert(!listIterator2.HasValue());
    var number = 0;
    for (var item = list4.Find(0); item.HasValue(); item.Next()) {
        unit_test_1.Assert.Assert(item.HasValue());
        unit_test_1.Assert.Assert(item.Value() === number);
        number++;
    }
    unit_test_1.Assert.Assert(number === 10);
});
unitTest.AddTestCase("Insert after", function () {
    var list5 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list5.InsertFront(i.toString());
    var listIterator3 = list5.First();
    listIterator3 = list5.Last();
    list5.InsertAfter("TEST!", listIterator3);
    unit_test_1.Assert.Assert(listIterator3.Value() === "9");
    listIterator3.Next();
    unit_test_1.Assert.Assert(listIterator3.Value() === "TEST!");
    listIterator3.Previous();
    unit_test_1.Assert.Assert(listIterator3.Value() === "9");
    listIterator3 = list5.Find("5");
    list5.InsertAfter("5+", listIterator3);
    unit_test_1.Assert.Assert(listIterator3.Value() === "5");
    listIterator3.Previous();
    unit_test_1.Assert.Assert(listIterator3.Value() === "4");
    listIterator3.Next();
    listIterator3.Next();
    unit_test_1.Assert.Assert(listIterator3.Value() === "5+");
    listIterator3.Next();
    unit_test_1.Assert.Assert(listIterator3.Value() === "6");
    listIterator3 = list5.First();
    list5.InsertAfter("0+", listIterator3);
    unit_test_1.Assert.Assert(listIterator3.Value() === "0");
    listIterator3.Next();
    unit_test_1.Assert.Assert(listIterator3.Value() === "0+");
    listIterator3.Previous();
    unit_test_1.Assert.Assert(listIterator3.Value() === "0");
    unit_test_1.Assert.Assert(list5.First().Value() == "0");
    unit_test_1.Assert.Assert(list5.Last().Value() == "TEST!");
});
unitTest.AddTestCase("Insert before", function () {
    var list6 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list6.InsertFront(i.toString());
    var listIterator4 = list6.First();
    listIterator4 = list6.Last();
    list6.InsertBefore("9-", listIterator4);
    unit_test_1.Assert.Assert(listIterator4.Value() === "9");
    listIterator4.Previous();
    unit_test_1.Assert.Assert(listIterator4.Value() === "9-");
    listIterator4.Next();
    unit_test_1.Assert.Assert(listIterator4.Value() === "9");
    listIterator4 = list6.First();
    list6.InsertBefore("0-", listIterator4);
    unit_test_1.Assert.Assert(listIterator4.Value() === "0");
    listIterator4.Previous();
    unit_test_1.Assert.Assert(listIterator4.Value() === "0-");
    listIterator4.Next();
    unit_test_1.Assert.Assert(listIterator4.Value() === "0");
    unit_test_1.Assert.Assert(list6.First().Value() == "0-");
    unit_test_1.Assert.Assert(list6.Last().Value() == "9");
});
unitTest.AddTestCase("Empty, clear", function () {
    var list7 = new List_1.List();
    list7.InsertFront(true);
    list7.InsertFront(false);
    list7.InsertFront(true);
    list7.InsertFront(false);
    unit_test_1.Assert.Assert(list7.Count() === 4);
    unit_test_1.Assert.Assert(!list7.IsEmpty());
    list7.Clear();
    unit_test_1.Assert.Assert(list7.IsEmpty());
    unit_test_1.Assert.Assert(list7.Count() === 0);
    var listIterator5 = list7.First();
    unit_test_1.Assert.Assert(!listIterator5.HasValue());
});
unitTest.AddTestCase("Remove", function () {
    var list8 = new List_1.List();
    for (var i = 0; i < 10; i++)
        list8.InsertFront(i);
    for (var i = 0; i < 10; i++)
        list8.RemoveAt(list8.First());
    unit_test_1.Assert.Assert(list8.IsEmpty());
    for (var i = 0; i < 10; i++)
        list8.InsertFront(i);
    list8.RemoveAt(list8.Find(5));
    var listIterator6 = list8.First();
    var number = 0;
    for (var i = 0; i < 10; i++) {
        if (i != 5) {
            unit_test_1.Assert.Assert(listIterator6.Value() == i);
            listIterator6.Next();
            number++;
        }
    }
    unit_test_1.Assert.Assert(number == 9);
    list8.RemoveAt(list8.First());
    list8.RemoveAt(list8.Last());
    unit_test_1.Assert.Assert(list8.First().Value() == 1);
    unit_test_1.Assert.Assert(list8.Last().Value() == 8);
    list8.Remove(1);
    list8.Remove(2);
    list8.Remove(3);
    list8.Remove(4);
    list8.Remove(6);
    list8.Remove(7);
    unit_test_1.Assert.Assert(list8.First().Value() == 8);
    unit_test_1.Assert.Assert(list8.Last().Value() == 8);
    list8.Remove(8);
    unit_test_1.Assert.IsFalse(list8.First().HasValue());
    unit_test_1.Assert.IsFalse(list8.Last().HasValue());
});
unitTest.AddTestCase("Update", function () {
    //UPDATE
    var list9 = new List_1.List();
    list9.InsertFront(1);
    list9.UpdateAt(2, list9.First());
    unit_test_1.Assert.Assert(list9.First().Value() === 2);
    list9.InsertFront(3);
    list9.InsertFront(4);
    list9.InsertFront(5);
    list9.Update(4, 40);
    list9.Update(2, 20);
    list9.Update(5, 50);
    var it7 = list9.First();
    unit_test_1.Assert.AreEqual(it7.Value(), 20);
    it7.Next();
    unit_test_1.Assert.AreEqual(it7.Value(), 3);
    it7.Next();
    unit_test_1.Assert.AreEqual(it7.Value(), 40);
    it7.Next();
    unit_test_1.Assert.AreEqual(it7.Value(), 50);
});
unitTest.AddTestCase("At", function () {
    //AT
    var list10 = new List_1.List();
    unit_test_1.Assert.IsNull(list10.At(0));
    unit_test_1.Assert.IsFalse(list10.AtIterator(0).HasValue());
    for (var i = 0; i < 100; i += 10)
        list10.Insert(i);
    for (var i = 0; i < 10; i++)
        unit_test_1.Assert.AreEqual(list10.At(i), i * 10);
    for (var i = 0; i < 10; i++)
        unit_test_1.Assert.AreEqual(list10.AtIterator(i).Value(), i * 10);
    unit_test_1.Assert.IsNull(list10.At(10));
    unit_test_1.Assert.IsNull(list10.At(11));
    unit_test_1.Assert.IsNull(list10.At(12));
    unit_test_1.Assert.IsFalse(list10.AtIterator(10).HasValue());
    unit_test_1.Assert.IsFalse(list10.AtIterator(11).HasValue());
    unit_test_1.Assert.IsFalse(list10.AtIterator(12).HasValue());
});
unitTest.AddTestCase("Clone", function () {
    var list10 = new List_1.List();
    for (var i = 0; i < 100; i += 10)
        list10.Insert(i);
    //CLONE
    var list11 = list10.Clone();
    for (var i = 0; i < 10; i++)
        list11.Update(i * 10, i * 100);
    for (var i = 0; i < 10; i++)
        unit_test_1.Assert.AreEqual(list10.At(i), i * 10);
    for (var i = 0; i < 10; i++)
        unit_test_1.Assert.AreEqual(list11.At(i), i * 100);
});
unitTest.AddTestCase("Comparator", function () {
    var FooCmp = /** @class */ (function () {
        function FooCmp(n) {
            this.number = n;
        }
        FooCmp.prototype.GetComparator = function () {
            return function (a, b) {
                return a.number - b.number;
            };
        };
        FooCmp.prototype.Clone = function () {
            return new FooCmp(this.number);
        };
        return FooCmp;
    }());
    var list12 = new List_1.List([
        new FooCmp(0),
        new FooCmp(1),
        new FooCmp(2),
        new FooCmp(3),
        new FooCmp(4)
    ]);
    unit_test_1.Assert.AreEqual(list12.Find(new FooCmp(0)).Value().number, 0);
    unit_test_1.Assert.AreEqual(list12.Find(new FooCmp(1)).Value().number, 1);
    unit_test_1.Assert.AreEqual(list12.Find(new FooCmp(2)).Value().number, 2);
    unit_test_1.Assert.AreEqual(list12.Find(new FooCmp(3)).Value().number, 3);
    unit_test_1.Assert.AreEqual(list12.Find(new FooCmp(4)).Value().number, 4);
});
unitTest.AddTestCase("IClonable", function () {
    var FooCmp = /** @class */ (function () {
        function FooCmp(n) {
            this.number = n;
        }
        FooCmp.prototype.GetComparator = function () {
            return function (a, b) {
                return a.number - b.number;
            };
        };
        FooCmp.prototype.Clone = function () {
            return new FooCmp(this.number);
        };
        return FooCmp;
    }());
    var list14 = new List_1.List([
        new FooCmp(0),
        new FooCmp(1),
        new FooCmp(2),
        new FooCmp(3),
        new FooCmp(4)
    ]);
    var list15 = list14.Clone();
    var list16 = list14.Clone();
    list15.front.value.number = -1;
    unit_test_1.Assert.AreEqual(list15.front.value.number, -1);
    unit_test_1.Assert.AreEqual(list16.front.value.number, 4);
});
unitTest.Run();
