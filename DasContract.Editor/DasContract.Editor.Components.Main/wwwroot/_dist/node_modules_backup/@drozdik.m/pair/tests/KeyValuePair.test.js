exports.__esModule = true;
var KeyValuePair_1 = require("../src/KeyValuePair");
var unit_test_1 = require("@drozdik.m/unit-test");
var unitTest = new unit_test_1.UnitTest("KeyValue Pair");
unitTest.AddTestCase("Empty Constructor", function () {
    var pair1 = new KeyValuePair_1.KeyValuePair();
    unit_test_1.Assert.IsNull(pair1.Key());
    unit_test_1.Assert.IsNull(pair1.value);
    unit_test_1.Assert.IsNull(pair1.Value());
});
unitTest.AddTestCase("Constructor", function () {
    var pair1 = new KeyValuePair_1.KeyValuePair(1, "2");
    unit_test_1.Assert.AreEqual(1, pair1.Key());
    unit_test_1.Assert.AreEqual("2", pair1.value);
    unit_test_1.Assert.AreEqual("2", pair1.Value());
});
unitTest.AddTestCase("Getter, Setter", function () {
    var pair1 = new KeyValuePair_1.KeyValuePair(1, "2");
    unit_test_1.Assert.AreEqual(1, pair1.Key());
    unit_test_1.Assert.AreEqual("2", pair1.value);
    unit_test_1.Assert.AreEqual("2", pair1.Value());
    pair1.SetValue("3");
    unit_test_1.Assert.AreEqual(1, pair1.Key());
    unit_test_1.Assert.AreEqual("3", pair1.value);
    unit_test_1.Assert.AreEqual("3", pair1.Value());
});
unitTest.AddTestCase("Clone", function () {
    var pair = new KeyValuePair_1.KeyValuePair(1, 2);
    var pairCopy = pair.Clone();
    pairCopy.SetValue(22);
    unit_test_1.Assert.AreEqual(1, pair.Key());
    unit_test_1.Assert.AreEqual(2, pair.Value());
    unit_test_1.Assert.AreEqual(1, pairCopy.Key());
    unit_test_1.Assert.AreEqual(22, pairCopy.Value());
});
unitTest.AddTestCase("Clone, IClonable", function () {
    var FooCmp = /** @class */ (function () {
        function FooCmp(n) {
            this.number = n;
        }
        FooCmp.prototype.GetComparator = function () {
            return function (a, b) {
                return a.number - b.number;
            };
        };
        FooCmp.prototype.Clone = function () {
            return new FooCmp(this.number);
        };
        return FooCmp;
    }());
    var foocmp1 = new FooCmp(1);
    var foocmp2 = new FooCmp(2);
    var foocmp3 = new FooCmp(3);
    var foocmp4 = new FooCmp(4);
    var pair = new KeyValuePair_1.KeyValuePair(foocmp1, foocmp2);
    var pairCopy = pair.Clone();
    pairCopy.Key().number = 11;
    pairCopy.Value().number = 22;
    unit_test_1.Assert.AreEqual(1, pair.Key().number);
    unit_test_1.Assert.AreEqual(2, pair.Value().number);
    unit_test_1.Assert.AreEqual(11, pairCopy.Key().number);
    unit_test_1.Assert.AreEqual(22, pairCopy.Value().number);
});
unitTest.Run();
