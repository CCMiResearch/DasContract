exports.__esModule = true;
var window_events_1 = require("@drozdik.m/window-events");
var event_1 = require("@drozdik.m/event");
var MenuResizeArgs_1 = require("../args/MenuResizeArgs");
var MenuStatusArgs_1 = require("../args/MenuStatusArgs");
var Menu = /** @class */ (function () {
    //Toggle buttons
    //private toggleButtons: HTMLElement[] = []
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    function Menu(menuElement) {
        this.widthBreaking = false;
        this.isDesktopMenu = true;
        this.menuOpen = false;
        //private heightBreakpint: number;
        //private isScrollTop: boolean = false;
        //Callbacks
        /*OnScrollTop: Callback = new Callback();
        OnScrollTopOnce: Callback = new Callback();
        OnScrollBottom: Callback = new Callback();
        OnScrollBottomOnce: Callback = new Callback();*/
        this.OnMenuOpen = new event_1.Event();
        this.OnMenuClose = new event_1.Event();
        this.OnDesktopMenu = new event_1.Event();
        this.OnDesktopMenuOnce = new event_1.Event();
        this.OnMobileMenu = new event_1.Event();
        this.OnMobileMenuOnce = new event_1.Event();
        this.menu = menuElement;
        this.menu.classList.add("closedMenu");
        this.menu.classList.remove("openMenu");
        this.menu.classList.add("desktopMenu");
        this.menu.classList.remove("mobileMenu");
    }
    //--------------------------------------------------
    //---------OPEN/CLOSE-------------------------------
    //--------------------------------------------------
    /**
    * Opens the menu
    */
    Menu.prototype.Open = function () {
        this.menu.classList.add("openMenu");
        this.menu.classList.remove("closedMenu");
        this.menuOpen = true;
        this.OnMenuOpen.Invoke(this, new MenuStatusArgs_1.MenuStatusArgs(this.menuOpen));
    };
    /**
    * Closes the menu
    */
    Menu.prototype.Close = function () {
        this.menu.classList.add("closedMenu");
        this.menu.classList.remove("openMenu");
        this.menuOpen = false;
        this.OnMenuClose.Invoke(this, new MenuStatusArgs_1.MenuStatusArgs(this.menuOpen));
    };
    /**
     * Closes the menu if its opened. Opens the menu if closed
     * */
    Menu.prototype.Toggle = function () {
        if (this.menuOpen)
            this.Close();
        else
            this.Open();
    };
    /**
     * Sets toggle function to a specific element/button
     * @param button
     */
    Menu.prototype.AddToggleButton = function (button) {
        var object = this;
        button.addEventListener("click", function () {
            object.Toggle();
        });
        return this;
    };
    //--------------------------------------------------
    //---------RESIZE-----------------------------------
    //--------------------------------------------------
    /**
     * Enables the desktop/mobile switcher
     * @param breakpoint The mobile/desktop treshold
     */
    Menu.prototype.SetWidthBreaking = function (breakpoint) {
        //Set new breaking point
        this.widthBreakpoint = breakpoint;
        //Return if already on
        if (this.widthBreaking)
            return;
        this.widthBreaking = true;
        //Add the resize event
        var object = this;
        window_events_1.WindowEvents.OnResize.Add(function (caller, args) {
            object.HandleResize();
        });
        object.HandleResize();
        return this;
    };
    /**
     * Handlers window resize event
     * @param caller The window event object
     * @param args Resize args
     */
    Menu.prototype.HandleResize = function () {
        //Mobile
        if (window_events_1.WindowEvents.Width() < this.widthBreakpoint) {
            this.OnMobileMenu.Invoke(this, new MenuResizeArgs_1.MenuResizeArgs(this.menu));
            if (this.isDesktopMenu) {
                this.menu.classList.add("mobileMenu");
                this.menu.classList.remove("desktopMenu");
                this.OnMobileMenuOnce.Invoke(this, new MenuResizeArgs_1.MenuResizeArgs(this.menu));
            }
            this.isDesktopMenu = false;
        }
        //Desktop
        else {
            this.OnDesktopMenu.Invoke(this, new MenuResizeArgs_1.MenuResizeArgs(this.menu));
            if (!this.isDesktopMenu) {
                this.menu.classList.add("desktopMenu");
                this.menu.classList.remove("mobileMenu");
                this.OnDesktopMenuOnce.Invoke(this, new MenuResizeArgs_1.MenuResizeArgs(this.menu));
            }
            this.isDesktopMenu = true;
        }
    };
    return Menu;
}());
exports.Menu = Menu;
