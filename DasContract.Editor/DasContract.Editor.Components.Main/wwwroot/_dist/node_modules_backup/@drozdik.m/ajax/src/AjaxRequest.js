exports.__esModule = true;
/**
 * Class representing one ajax request
 * */
var AjaxRequest = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    /**
     * New ajax request information container.
     * @param method Used HTTP method
     * @param url Target url
     */
    function AjaxRequest(method, url, parameters, body, successCallback, errorCallback) {
        if (parameters === void 0) { parameters = []; }
        if (body === void 0) { body = null; }
        if (successCallback === void 0) { successCallback = null; }
        if (errorCallback === void 0) { errorCallback = null; }
        this.method = method;
        this.url = url;
        this.parameters = parameters;
        this.body = body;
        this.successCallback = successCallback;
        this.errorCallback = errorCallback;
    }
    //--------------------------------------------------
    //----------XMLHttpRequest--------------------------
    //--------------------------------------------------
    /**
     * Returns set up (but not triggered) XMLHttpRequest object
     * */
    AjaxRequest.prototype.GetXMLHttpRequest = function () {
        //Create the request
        var res = new XMLHttpRequest();
        //Set the request parameters
        res.open(this.method, this.GetFullUrl(), true);
        //Return the setup request
        return res;
    };
    /**
     * Returns request body
     * */
    AjaxRequest.prototype.GetBody = function () {
        return this.body;
    };
    /**
     * Tells if this request has body
     * */
    AjaxRequest.prototype.HasBody = function () {
        return this.body != null;
    };
    /**
     * Returns full URL with parameters
     * */
    AjaxRequest.prototype.GetFullUrl = function () {
        var res = this.url;
        /*if (this.parameters.length > 0)
            if (res.length <= 0 || res[res.length - 1] != "/")
                res += "/";*/
        if (this.parameters.length > 0 && res.length <= 0)
            res += "/";
        if (this.parameters.length > 0)
            res += "?";
        for (var i = 0; i < this.parameters.length; i++) {
            res += this.parameters[i].Name() + "=" + this.parameters[i].Value();
            if (i <= this.parameters.length - 2)
                res += "&";
        }
        return res;
    };
    /**
     * Invokes error callback
     * */
    AjaxRequest.prototype.InvokeErrorCallback = function (response) {
        if (this.errorCallback)
            this.errorCallback(response);
    };
    /**
     * Invokes success callback
     * */
    AjaxRequest.prototype.InvokeSuccessCallback = function (response) {
        if (this.successCallback)
            this.successCallback(response);
    };
    return AjaxRequest;
}());
exports.AjaxRequest = AjaxRequest;
