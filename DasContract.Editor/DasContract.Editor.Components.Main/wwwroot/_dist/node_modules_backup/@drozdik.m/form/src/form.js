exports.__esModule = true;
var map_1 = require("@drozdik.m/map");
var event_1 = require("@drozdik.m/event");
var FormArgs_1 = require("../args/FormArgs");
var Form = /** @class */ (function () {
    //--------------------------------------------------
    //----------CONSTRUCTOR-----------------------------
    //--------------------------------------------------
    /**
     * Form object handling submit and validation
     * @param id Id of target form
     */
    function Form(id) {
        //--------------------------------------------------
        //----------PROPERTIES------------------------------
        //--------------------------------------------------
        //Form
        this.id = "";
        this.formElement = null;
        //Inputs
        this.inputElements = new map_1.Map();
        //Validation
        this.isValid = false;
        //Events
        this.OnSubmit = new event_1.Event();
        this.OnValidSubmit = new event_1.Event();
        this.OnInvalidSubmit = new event_1.Event();
        this.id = id;
        this.formElement = document.getElementById(this.id);
        if (!this.formElement) {
            console.error("Form(#" + this.id + ") - element not found");
            return;
        }
        this.CatchSubmit();
    }
    //--------------------------------------------------
    //----------INPUTS----------------------------------
    //--------------------------------------------------
    /**
     * Adds and initializes new input
     * @param input
     */
    Form.prototype.AddInput = function (input) {
        var object = this;
        input.Initialize();
        input.OnChange.Add(function () {
            object.HandleInputChange(input);
        });
        this.inputElements.InsertValue(input.Id(), input);
    };
    /**
     * Handles input change
     * @param input Changed input
     */
    Form.prototype.HandleInputChange = function (input) {
        input.Validate();
    };
    //--------------------------------------------------
    //----------VALIDATION------------------------------
    //--------------------------------------------------
    /**
     * Validates an element by given ID
     * @param elementId
     */
    Form.prototype.ValidateElement = function (elementId) {
        this.ValidateInput(this.inputElements.FindValue(elementId).PairValue());
    };
    /**
     * Validates the input
     * @param input Input
     */
    Form.prototype.ValidateInput = function (input) {
        input.Validate();
    };
    /**
     * Validates all inputs. Returns true if all inputs are valid, else false.
     * */
    Form.prototype.Validate = function () {
        var formValid = true;
        for (var it = this.inputElements.First(); it.HasValue(); it.Next()) {
            var isValid = it.PairValue().Validate();
            if (!isValid)
                formValid = false;
        }
        this.isValid = formValid;
        return this.isValid;
    };
    /**
     * Returns true if the form is valid
     * */
    Form.prototype.IsValid = function () {
        return this.isValid;
    };
    //--------------------------------------------------
    //----------SUBMIT----------------------------------
    //--------------------------------------------------
    /**
     * Submit catcher
     * */
    Form.prototype.CatchSubmit = function () {
        var object = this;
        var submitButtons = this.formElement.querySelectorAll("[type='submit']");
        for (var i = 0; i < submitButtons.length; i++) {
            submitButtons[i].addEventListener("click", function (e) {
                e.preventDefault ? e.preventDefault() : (e.returnValue = false);
                object.HandleSubmit();
            });
        }
    };
    /**
     * Submit handler
     * */
    Form.prototype.HandleSubmit = function () {
        var isValid = this.Validate();
        if (isValid)
            this.OnValidSubmit.Invoke(this, new FormArgs_1.FormArgs());
        else
            this.OnInvalidSubmit.Invoke(this, new FormArgs_1.FormArgs());
        this.OnSubmit.Invoke(this, new FormArgs_1.FormArgs());
    };
    /**
     * Submits the form as usual
     * */
    Form.prototype.Submit = function () {
        this.formElement.submit();
    };
    //--------------------------------------------------
    //----------RESET-----------------------------------
    //--------------------------------------------------
    /**
     * Resets the form (values and validation)
     * */
    Form.prototype.Reset = function () {
        for (var it = this.inputElements.First(); it.HasValue(); it.Next())
            it.PairValue().Reset();
    };
    return Form;
}());
exports.Form = Form;
