exports.__esModule = true;
var Content_1 = require("../content/Content");
var option_1 = require("@drozdik.m/option");
var InfoChannel_1 = require("../channels/InfoChannel");
var WarningsChannel_1 = require("../channels/WarningsChannel");
var SuccessesChannel_1 = require("../channels/SuccessesChannel");
var ErrorsChannel_1 = require("../channels/ErrorsChannel");
var MessageParsingError_1 = require("../errors/MessageParsingError");
var BonsaiAsyncResponseProtocolMessage = /** @class */ (function () {
    function BonsaiAsyncResponseProtocolMessage(version, hasErrors, channels, content) {
        this.version = version;
        this.hasErrors = hasErrors;
        this.channels = channels;
        this.content = content;
    }
    /**
     * Returns version
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetVersion = function () {
        return this.version;
    };
    /**
     * Tells if this message has error
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.HasErrors = function () {
        return this.hasErrors;
    };
    /**
     * Return this message content
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetContent = function () {
        return this.content;
    };
    /**
     * Finds a channel of this message
     * @param name The channel name
     */
    BonsaiAsyncResponseProtocolMessage.prototype.FindChannel = function (name) {
        for (var i = 0; i < this.channels.length; i++)
            if (this.channels[i].GetChannelName() == name)
                return option_1.Option.Some(this.channels[i]);
        return option_1.Option.None();
    };
    /**
     * Returns info channel of this message
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetInfoChannel = function () {
        return this.FindChannel("infos");
    };
    /**
     * Returns success channel of this message
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetSuccessesChannel = function () {
        return this.FindChannel("successes");
    };
    /**
     * Returns warnings channel of this message
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetWarningsChannel = function () {
        return this.FindChannel("warnings");
    };
    /**
     * Returns errors channel of this message
     * */
    BonsaiAsyncResponseProtocolMessage.prototype.GetErrorsChannel = function () {
        return this.FindChannel("errors");
    };
    /**
     * Returns BARP message object from a json
     * @param jsonInString
     */
    BonsaiAsyncResponseProtocolMessage.FromJSON = function (jsonInString) {
        var json = JSON.parse(jsonInString);
        //Protocol
        var protocol = json.protocol;
        if (typeof protocol == "undefined")
            throw new MessageParsingError_1.MessageParsingError("Protocol is not defined");
        if (protocol != "barp")
            throw new MessageParsingError_1.MessageParsingError("Protocol is not \"barp\"");
        //Version
        var version = json.version;
        if (typeof version == "undefined")
            throw new MessageParsingError_1.MessageParsingError("Version is not defined");
        if (version.toString() != "1.0.0")
            throw new MessageParsingError_1.MessageParsingError("Only version 1.0.0 is supported");
        //Content
        var content = new Content_1.Content(json.content);
        //Status
        var status = json.status;
        if (typeof status == "undefined")
            throw new MessageParsingError_1.MessageParsingError("Status is not defined");
        var hasErrors = json.status.hasErrors;
        if (typeof hasErrors == "undefined")
            throw new MessageParsingError_1.MessageParsingError("hasErrors is not defined");
        var channels = [];
        if (typeof status.infos != "undefined") {
            if (typeof status.infos.messages == "undefined")
                throw new MessageParsingError_1.MessageParsingError("Messages in info channel are not defined");
            channels.push(new InfoChannel_1.InfoChannel(status.infos.messages, status.infos.content));
        }
        if (typeof status.errors != "undefined") {
            if (typeof status.errors.messages == "undefined")
                throw new MessageParsingError_1.MessageParsingError("Messages in errors channel are not defined");
            channels.push(new ErrorsChannel_1.ErrorsChannel(status.errors.messages, status.errors.content));
        }
        if (typeof status.successes != "undefined") {
            if (typeof status.successes.messages == "undefined")
                throw new MessageParsingError_1.MessageParsingError("Messages in successes channel are not defined");
            channels.push(new SuccessesChannel_1.SuccessesChannel(status.successes.messages, status.successes.content));
        }
        if (typeof status.warnings != "undefined") {
            if (typeof status.warnings.messages == "undefined")
                throw new MessageParsingError_1.MessageParsingError("Messages in warnings channel are not defined");
            channels.push(new WarningsChannel_1.WarningsChannel(status.warnings.messages, status.warnings.content));
        }
        //Create and return the res
        return new BonsaiAsyncResponseProtocolMessage(version, hasErrors, channels, content);
    };
    return BonsaiAsyncResponseProtocolMessage;
}());
exports.BonsaiAsyncResponseProtocolMessage = BonsaiAsyncResponseProtocolMessage;
