exports.__esModule = true;
var unit_test_1 = require("@drozdik.m/unit-test");
var Map_1 = require("../src/Map");
var KeyValuePair_1 = require("@drozdik.m/pair/dist/KeyValuePair");
//-----TESTING BEGIN-----
var unitTest = new unit_test_1.UnitTest("Map");
unitTest.AddTestCase("Insert", function () {
    //Insert
    var tree = new Map_1.Map();
    tree.InsertValue(20, "200");
    tree.InsertValue(20, "200");
    tree.InsertValue(30, "300");
    tree.InsertValue(40, "400");
    tree.InsertValue(50, "500");
    tree.Insert(new KeyValuePair_1.KeyValuePair(45, "450"));
    tree.InsertValue(35, "350");
    tree.InsertValue(10, "100");
    tree.InsertValue(0, "00");
    tree.InsertValue(25, "250");
    var keys = [
        0, 10, 20, 25, 30, 35, 40, 45, 50
    ];
    var values = [
        "00", "100", "200", "250", "300", "350", "400", "450", "500"
    ];
    var i = 0;
    for (var it = tree.First(); it.HasValue(); it.Next()) {
        unit_test_1.Assert.AreEqual(keys[i], it.PairKey());
        unit_test_1.Assert.AreEqual(values[i], it.PairValue());
        i++;
    }
    unit_test_1.Assert.AreEqual(9, i);
});
unitTest.AddTestCase("Find", function () {
    var map1 = new Map_1.Map();
    var valuesArray = [40, 10, 20, 80, 90, 50, 60, 70, 0, 30, 15, 45, 85, 5];
    for (var i = 0; i < valuesArray.length; i++)
        map1.InsertValue(valuesArray[i], valuesArray[i].toString() + "0");
    for (var i = 0; i < valuesArray.length; i++)
        unit_test_1.Assert.AreEqual(valuesArray[i].toString() + "0", map1.FindValue(valuesArray[i]).PairValue());
    for (var i = 0; i < valuesArray.length; i++)
        unit_test_1.Assert.AreEqual(valuesArray[i].toString() + "0", map1.Find(new KeyValuePair_1.KeyValuePair(valuesArray[i], "xxx")).PairValue());
    unit_test_1.Assert.IsFalse(map1.FindValue(999).HasValue());
    var map2 = new Map_1.Map();
    unit_test_1.Assert.IsFalse(map2.FindMin().HasValue());
    unit_test_1.Assert.IsFalse(map2.FindMax().HasValue());
    unit_test_1.Assert.IsFalse(map2.FindValue(1).HasValue());
    unit_test_1.Assert.IsFalse(map2.First().HasValue());
    unit_test_1.Assert.IsFalse(map2.Last().HasValue());
    map2.InsertValue(1, "10");
    unit_test_1.Assert.AreEqual("10", map2.First().PairValue());
    unit_test_1.Assert.AreEqual("10", map2.Last().PairValue());
});
unitTest.AddTestCase("Iterator", function () {
    //Iterator - next, prev, value, hasvalue
    var map = new Map_1.Map();
    var valuesArray = [40, 10, 20, 80, 90, 50, 60, 70, 0, 30, 15, 45, 85, 5];
    for (var i = 0; i < valuesArray.length; i++)
        map.InsertValue(valuesArray[i], valuesArray[i].toString() + "0");
    valuesArray = valuesArray.sort(function (a, b) { return a - b; });
    var number = 0;
    for (var it = map.First(); it.HasValue(); it.Next())
        unit_test_1.Assert.AreEqual(it.PairKey(), valuesArray[number++]);
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    number = valuesArray.length - 1;
    for (var it = map.Last(); it.HasValue(); it.Previous())
        unit_test_1.Assert.AreEqual(it.PairKey(), valuesArray[number--]);
    unit_test_1.Assert.AreEqual(-1, number);
});
unitTest.AddTestCase("Remove", function () {
    var map = new Map_1.Map();
    map.InsertValue(20, "");
    map.InsertValue(20, "");
    map.InsertValue(30, "");
    map.InsertValue(40, "");
    map.InsertValue(50, "");
    map.InsertValue(45, "");
    map.InsertValue(35, "");
    map.InsertValue(10, "");
    map.InsertValue(0, "");
    map.InsertValue(25, "");
    map.RemoveAt(map.FindValue(25));
    map.RemoveValue(30);
    map.RemoveValue(35);
    map.Remove(new KeyValuePair_1.KeyValuePair(0, "xxx"));
    map.RemoveValue(50);
    map.RemoveValueAt(map.FindValue(45));
    map.RemoveValue(20);
    map.RemoveAt(map.FindValue(20));
    //40, 10
    unit_test_1.Assert.AreEqual(10, map.First().PairKey());
    unit_test_1.Assert.AreEqual(40, map.Last().PairKey());
});
unitTest.AddTestCase("Clone", function () {
    var map = new Map_1.Map();
    var valuesArray = [45, 85, 5, 60, 70, 80, 90, 10, 20, 30, 15, 40, 0, 55];
    for (var i = 0; i < valuesArray.length; i++)
        map.InsertValue(valuesArray[i], "");
    valuesArray = valuesArray.sort(function (a, b) { return a - b; });
    var number = 0;
    for (var it = map.First(); it.HasValue(); it.Next())
        unit_test_1.Assert.AreEqual(valuesArray[number++], it.PairKey());
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    var mapClone = map.Clone();
    for (var i = 0; i < valuesArray.length; i++)
        map.UpdateValueAt("1", map.FindValue(valuesArray[i]));
    number = 0;
    for (var it = mapClone.First(); it.HasValue(); it.Next())
        unit_test_1.Assert.AreEqual(it.PairKey(), valuesArray[number++]);
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    unit_test_1.Assert.AreEqual(map.Count(), valuesArray.length);
    unit_test_1.Assert.AreEqual(mapClone.Count(), valuesArray.length);
    map.Clear();
    unit_test_1.Assert.AreEqual(map.Count(), 0);
    unit_test_1.Assert.AreEqual(mapClone.Count(), valuesArray.length);
    number = 0;
    for (var it = mapClone.First(); it.HasValue(); it.Next())
        unit_test_1.Assert.AreEqual(it.PairKey(), valuesArray[number++]);
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
});
unitTest.AddTestCase("Comparator, Clone", function () {
    var FooCmp = /** @class */ (function () {
        function FooCmp(n) {
            this.number = n;
        }
        FooCmp.prototype.GetComparator = function () {
            return function (a, b) {
                return a.number - b.number;
            };
        };
        FooCmp.prototype.Clone = function () {
            return new FooCmp(this.number);
        };
        return FooCmp;
    }());
    var map = new Map_1.Map([
        new KeyValuePair_1.KeyValuePair(new FooCmp(0), new FooCmp(0)),
        new KeyValuePair_1.KeyValuePair(new FooCmp(1), new FooCmp(1)),
        new KeyValuePair_1.KeyValuePair(new FooCmp(2), new FooCmp(2)),
        new KeyValuePair_1.KeyValuePair(new FooCmp(3), new FooCmp(3)),
        new KeyValuePair_1.KeyValuePair(new FooCmp(4), new FooCmp(4))
    ]);
    unit_test_1.Assert.AreEqual(0, map.FindValue(new FooCmp(0)).PairValue().number);
    unit_test_1.Assert.AreEqual(1, map.FindValue(new FooCmp(1)).PairValue().number);
    unit_test_1.Assert.AreEqual(2, map.FindValue(new FooCmp(2)).PairValue().number);
    unit_test_1.Assert.AreEqual(3, map.FindValue(new FooCmp(3)).PairValue().number);
    unit_test_1.Assert.AreEqual(4, map.FindValue(new FooCmp(4)).PairValue().number);
    var mapClone = map.Clone();
    unit_test_1.Assert.AreEqual(mapClone.Count(), 5);
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(0)).PairValue().number, 0);
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(1)).PairValue().number, 1);
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(2)).PairValue().number, 2);
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(3)).PairValue().number, 3);
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(4)).PairValue().number, 4);
    mapClone.FindValue(new FooCmp(0)).PairKey().number = -1;
    unit_test_1.Assert.AreEqual(mapClone.FindValue(new FooCmp(-1)).PairKey().number, -1);
    mapClone.Dispose();
    unit_test_1.Assert.IsFalse(map.FindValue(new FooCmp(-1)).HasValue());
    unit_test_1.Assert.AreEqual(map.FindValue(new FooCmp(0)).PairValue().number, 0);
    unit_test_1.Assert.AreEqual(map.FindValue(new FooCmp(1)).PairValue().number, 1);
    unit_test_1.Assert.AreEqual(map.FindValue(new FooCmp(2)).PairValue().number, 2);
    unit_test_1.Assert.AreEqual(map.FindValue(new FooCmp(3)).PairValue().number, 3);
    unit_test_1.Assert.AreEqual(map.FindValue(new FooCmp(4)).PairValue().number, 4);
});
unitTest.AddTestCase("Update", function () {
    var map = new Map_1.Map();
    map.UpdateValue(10, "10");
    var valuesArray = [
        new KeyValuePair_1.KeyValuePair(40, ""),
        new KeyValuePair_1.KeyValuePair(60, ""),
        new KeyValuePair_1.KeyValuePair(70, ""),
        new KeyValuePair_1.KeyValuePair(0, ""),
        new KeyValuePair_1.KeyValuePair(30, ""),
        new KeyValuePair_1.KeyValuePair(15, ""),
        new KeyValuePair_1.KeyValuePair(45, ""),
        new KeyValuePair_1.KeyValuePair(85, ""),
        new KeyValuePair_1.KeyValuePair(5, ""),
        new KeyValuePair_1.KeyValuePair(10, ""),
        new KeyValuePair_1.KeyValuePair(20, ""),
        new KeyValuePair_1.KeyValuePair(80, ""),
        new KeyValuePair_1.KeyValuePair(90, ""),
        new KeyValuePair_1.KeyValuePair(55, "")
    ];
    map.Build(valuesArray);
    valuesArray = valuesArray.sort(function (a, b) { return a.Key() - b.Key(); });
    var number = 0;
    for (var it = map.First(); it.HasValue(); it.Next())
        unit_test_1.Assert.AreEqual(it.PairKey(), valuesArray[number++].Key());
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    for (var i = 0; i < valuesArray.length; i++)
        map.UpdateValueAt("ooo", map.FindValue(valuesArray[i].Key()));
    map.UpdateValue(9999, "999999");
    map.UpdateValueAt("999999", map.FindValue(999));
    for (var i = 0; i < valuesArray.length; i++)
        map.UpdateValue(valuesArray[i].Key(), "xoxo");
    number = 0;
    for (var it = map.First(); it.HasValue(); it.Next(), number++)
        unit_test_1.Assert.AreEqual("xoxo", it.PairValue());
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    for (var i = 0; i < valuesArray.length; i++)
        map.Update(new KeyValuePair_1.KeyValuePair(valuesArray[i].Key(), "xxx"), new KeyValuePair_1.KeyValuePair(valuesArray[i].Key(), "yoyo"));
    number = 0;
    for (var it = map.First(); it.HasValue(); it.Next(), number++)
        unit_test_1.Assert.AreEqual("yoyo", it.PairValue());
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
    for (var i = 0; i < valuesArray.length; i++)
        map.UpdateAt(new KeyValuePair_1.KeyValuePair(valuesArray[i].Key(), "koko"), map.FindValue(valuesArray[i].Key()));
    number = 0;
    for (var it = map.First(); it.HasValue(); it.Next(), number++)
        unit_test_1.Assert.AreEqual("koko", it.PairValue());
    unit_test_1.Assert.AreEqual(valuesArray.length, number);
});
unitTest.AddTestCase("At", function () {
    var map = new Map_1.Map();
    var valuesArray = [
        new KeyValuePair_1.KeyValuePair(40, ""),
        new KeyValuePair_1.KeyValuePair(60, ""),
        new KeyValuePair_1.KeyValuePair(70, ""),
        new KeyValuePair_1.KeyValuePair(0, ""),
        new KeyValuePair_1.KeyValuePair(30, ""),
        new KeyValuePair_1.KeyValuePair(15, ""),
        new KeyValuePair_1.KeyValuePair(45, ""),
        new KeyValuePair_1.KeyValuePair(85, ""),
        new KeyValuePair_1.KeyValuePair(5, ""),
        new KeyValuePair_1.KeyValuePair(10, ""),
        new KeyValuePair_1.KeyValuePair(20, ""),
        new KeyValuePair_1.KeyValuePair(80, ""),
        new KeyValuePair_1.KeyValuePair(90, ""),
        new KeyValuePair_1.KeyValuePair(55, "")
    ];
    map.Build(valuesArray);
    valuesArray = valuesArray.sort(function (a, b) { return a.Key() - b.Key(); });
    for (var i = 0; +i < valuesArray.length; i++)
        unit_test_1.Assert.AreEqual(map.At(i).Key(), valuesArray[i].Key());
    for (var i = 0; +i < valuesArray.length; i++)
        unit_test_1.Assert.AreEqual(map.AtIterator(i).PairKey(), valuesArray[i].Key());
    unit_test_1.Assert.IsFalse(map.AtIterator(-1).HasValue());
    unit_test_1.Assert.IsFalse(map.AtIterator(valuesArray.length).HasValue());
    unit_test_1.Assert.IsNull(map.At(-1));
    unit_test_1.Assert.IsNull(map.At(valuesArray.length));
});
unitTest.Run();
