exports.__esModule = true;
var event_1 = require("@drozdik.m/event");
//--------------------------------------------------
//----------FORM INPUT------------------------------
//--------------------------------------------------
var FormInput = /** @class */ (function () {
    //--------------------------------------------------
    //----------CONSTRUCTOR-----------------------------
    //--------------------------------------------------
    /**
     * Form input element
     * @param element Target HTML element
     */
    function FormInput(element) {
        //--------------------------------------------------
        //----------PROPERTIES------------------------------
        //--------------------------------------------------
        //Element
        this.id = "";
        this.element = null;
        //Error list
        this.hasErrorList = false;
        this.errorList = null;
        //Validation
        this.isValid = false;
        this.validations = [];
        //On change event
        this.OnChange = new event_1.Event();
        if (!element) {
            console.error("FormInput(" + element + ") - element is null");
            return;
        }
        this.element = element;
        this.id = this.element.id;
        //Error list
        this.errorList = document.getElementById(this.id + FormInput.errorListIdPostfix);
        if (!this.errorList) {
            this.element.insertAdjacentHTML("afterend", "<ul id=\"" + this.id + FormInput.errorListIdPostfix + "\" class=\"errorList\"></ul>");
            this.errorList = document.getElementById(this.id + FormInput.errorListIdPostfix);
        }
    }
    //--------------------------------------------------
    //----------VALIDATION------------------------------
    //--------------------------------------------------
    /**
     * Returns true if the input is valid
     * */
    FormInput.prototype.IsValid = function () {
        return this.isValid;
    };
    /**
     * Validates current input. Returns true if input is valid, else false
     * */
    FormInput.prototype.Validate = function () {
        //Validate & error messages
        var errorMessages = [];
        for (var i = 0; i < this.validations.length; i++) {
            var isValid = this.validations[i].Validate();
            if (!isValid)
                errorMessages.push(this.validations[i].ErrorMessage());
        }
        this.SetErrorList(errorMessages);
        //Set class
        if (errorMessages.length == 0) {
            this.Element().classList.add(FormInput.validInputClass);
            this.Element().classList.remove(FormInput.invalidInputClass);
        }
        else {
            this.Element().classList.remove(FormInput.validInputClass);
            this.Element().classList.add(FormInput.invalidInputClass);
        }
        //Return
        this.isValid = errorMessages.length == 0;
        return this.isValid;
    };
    /**
     * Adds new validation rule
     * */
    FormInput.prototype.AddValidation = function (validation) {
        this.validations.push(validation);
    };
    //--------------------------------------------------
    //----------ERROR LIST------------------------------
    //--------------------------------------------------
    /**
     * Sets the error list by string array
     * @param errorMessages
     */
    FormInput.prototype.SetErrorList = function (errorMessages) {
        var res = "";
        for (var i = 0; i < errorMessages.length; i++)
            if (errorMessages[i] != "")
                res += "<li>" + errorMessages[i] + "</li>";
        this.errorList.innerHTML = res;
    };
    /**
     * Clears the error list
     * */
    FormInput.prototype.EmptyErrorList = function () {
        this.errorList.innerHTML = "";
    };
    //--------------------------------------------------
    //----------ELEMENT---------------------------------
    //--------------------------------------------------
    /**
     * Returns inputs ID
     * */
    FormInput.prototype.Id = function () {
        return this.id;
    };
    /**
     * Returns input element
     * */
    FormInput.prototype.Element = function () {
        return this.element;
    };
    /**
     * Resets the input
     * */
    FormInput.prototype.Reset = function () {
        for (var i = 0; i < this.validations.length; i++)
            this.validations[i].Reset();
        this.EmptyErrorList();
        this.Element().classList.remove(FormInput.validInputClass);
        this.Element().classList.remove(FormInput.invalidInputClass);
    };
    FormInput.errorListIdPostfix = "ErrorList";
    FormInput.validInputClass = "validInput";
    FormInput.invalidInputClass = "invalidInput";
    return FormInput;
}());
exports.FormInput = FormInput;
