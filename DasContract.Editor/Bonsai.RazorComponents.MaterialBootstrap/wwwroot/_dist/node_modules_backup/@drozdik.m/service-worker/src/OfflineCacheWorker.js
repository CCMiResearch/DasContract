exports.__esModule = true;
var FetchHelper_1 = require("./Libs/FetchHelper");
var CacheHelper_1 = require("./Libs/CacheHelper");
var WorkerFile_1 = require("./Libs/WorkerFile");
var StaticAssets_1 = require("./Libs/StaticAssets");
//--------------------------------------------------
//---------INSTALL----------------------------------
//--------------------------------------------------
var Install_1 = require("./Fragments/Install");
Install_1.InstallSection.Render();
//--------------------------------------------------
//---------ACTIVATE---------------------------------
//--------------------------------------------------
var Activate_1 = require("./Fragments/Activate");
var HandleResponseAsOfflineCacheWorker_1 = require("./Handlers/HandleResponseAsOfflineCacheWorker");
var Settings_1 = require("./Libs/Settings");
Activate_1.ActivateSection.Render();
//--------------------------------------------------
//---------FETCH------------------------------------
//--------------------------------------------------
self.addEventListener("fetch", function (fetchRequest) {
    //DEBUG
    if (Settings_1.Settings.debug)
        console.log("Service worker - FETCH");
    //SKIP ALL METHODS EXCEPT "GET"
    if (fetchRequest.request.method.toUpperCase() != "GET") {
        if (Settings_1.Settings.debug)
            console.log("Service worker - non GET");
        FetchHelper_1.FetchHelper.RespondWithServer(fetchRequest);
        return;
    }
    HandleResponseAsOfflineCacheWorker_1.HandleResponseAsOfflineCacheWorker(fetchRequest);
});
/**
 * Handles successful response from the server, based on content and status number (200, 404, 500)
 * @param {Request} fetchRequest Original reguest for the result (request)
 * @param {Response} fetchResponse Fetch result (server response)
 * @returns Response
 */
function HandleSuccessfulServerResponse(fetchRequest, fetchResponse) {
    var fetchResponseClone = fetchResponse.clone();
    //RESPONSE CODE 2xx - SUCCESS
    if (fetchResponse.status.toString()[0] == "2") {
        if (Settings_1.Settings.debug)
            console.log("Service worker: Fetch success");
        //Add response to the cache
        caches.open(CacheHelper_1.CacheHelper.mainCacheName).then(function (cache) {
            cache.put(fetchRequest, fetchResponseClone);
        });
        //Return fetch response
        return fetchResponse;
    }
    //RESPONSE CODE 4xx - CLIENT ERROR
    else if (fetchResponse.status.toString()[0] == "4") {
        //Warn about the error
        console.warn("Sevice worker: error " + fetchResponse.status + " while fetching " + fetchResponse.url);
        //OPEN CACHE
        return caches.open(CacheHelper_1.CacheHelper.mainCacheName).then(function (cache) {
            //Match request in the cache
            return cache.match(fetchRequest).then(function (cacheResponse) {
                //Cached content found
                if (typeof cacheResponse != "undefined")
                    return cacheResponse;
                //Cached content not found
                else {
                    //Get file type
                    var file = new WorkerFile_1.File(fetchResponse.url);
                    //IMAGE - return default image
                    if (file.GetFileType() == WorkerFile_1.FileType.IMAGE)
                        return cache.match(StaticAssets_1.StaticAssets.defaultNotFoundImage);
                    //OTHER - pass the response
                    return fetchResponse;
                }
            });
        });
    }
    //RESPONSE CODE 5xx - SERVER ERROR
    else if (fetchResponse.status.toString()[0] == "5") {
        console.warn("Sevice worker: error " + fetchResponse.status + " while fetching " + fetchResponse.url);
        return fetchResponse;
    }
    //OPAQUE RESPONSE
    else if (fetchResponse.type == "opaque") {
        return fetchResponse;
    }
    //OTHER STATUSES
    else {
        console.warn("Sevice worker: error " + fetchResponse.status + " while fetching " + fetchResponse.url);
        return fetchResponse;
    }
}
/**
* Handles unsuccessful server response. Server is unreachable -> client or server is probably offline
* @param {Request} fetchRequest Original reguest for the result (request)
* @param {Response} fetchResponse Fetch result (server response)
*/
function HandleUnsuccessfulServerResponse(fetchRequest, fetchResponse) {
    //OPEN CACHE
    return caches.open(CacheHelper_1.CacheHelper.mainCacheName).then(function (cache) {
        //SEARCH FOR REQUESTED ITEM
        return cache.match(fetchRequest).then(function (cacheResponse) {
            //Item in cache found
            if (typeof cacheResponse != "undefined")
                return cacheResponse;
            //Item in cache not found - return "you are offline" page
            else {
                //Get file type
                var file = new WorkerFile_1.File(fetchRequest.url);
                //IMAGE - return default image
                if (file.GetFileType() == WorkerFile_1.FileType.IMAGE)
                    return cache.match(StaticAssets_1.StaticAssets.defaultNotFoundImage);
                else if (file.GetFileType() == WorkerFile_1.FileType.STYLE || file.GetFileType() == WorkerFile_1.FileType.SCRIPT)
                    return new Response("");
                //OTHER - return default offline page
                return cache.match(StaticAssets_1.StaticAssets.defaultOfflinePage);
            }
        });
    });
}
