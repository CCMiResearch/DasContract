exports.__esModule = true;
var FetchHelper_1 = require("./Libs/FetchHelper");
var CacheHelper_1 = require("./Libs/CacheHelper");
var CommonServerHandlers_1 = require("./Handlers/CommonServerHandlers");
var HandleResponseAsOfflineCacheWorker_1 = require("./Handlers/HandleResponseAsOfflineCacheWorker");
//--------------------------------------------------
//---------INSTALL----------------------------------
//--------------------------------------------------
var Install_1 = require("./Fragments/Install");
Install_1.InstallSection.Render();
//--------------------------------------------------
//---------ACTIVATE---------------------------------
//--------------------------------------------------
var Activate_1 = require("./Fragments/Activate");
var Settings_1 = require("./Libs/Settings");
Activate_1.ActivateSection.Render();
//--------------------------------------------------
//---------FETCH------------------------------------
//--------------------------------------------------
self.addEventListener("fetch", function (fetchRequest) {
    //DEBUG
    if (Settings_1.Settings.debug)
        console.log("Service worker - FETCH");
    //SKIP ALL METHODS EXCEPT "GET"
    if (fetchRequest.request.method.toUpperCase() != "GET") {
        if (Settings_1.Settings.debug)
            console.log("Service worker - non GET");
        FetchHelper_1.FetchHelper.RespondWithServer(fetchRequest);
        return;
    }
    //GET VERSION
    var versionMatch = fetchRequest.request.url.match(/version=([^&\s]*)/);
    /*
     /?version=2.5.4
     /?version=2.5.4&some=1.0.0
     some/sdf/fff?version=1.0.0
     some/sdf/fff?version=1.0.0&some=1.0.0
     some/sdf/fff?some=1.0.0&version=1.0.0
    */
    //THE TARGET IS NOT VERSIONED
    if (!versionMatch) {
        if (Settings_1.Settings.debug)
            console.log("Service worker: not versioned GET " + fetchRequest.request.url);
        HandleResponseAsOfflineCacheWorker_1.HandleResponseAsOfflineCacheWorker(fetchRequest);
        return;
    }
    //TARGET IS VERSIONED
    if (Settings_1.Settings.debug)
        console.log("Service worker: versioned GET " + fetchRequest.request.url);
    fetchRequest.respondWith(caches.open(CacheHelper_1.CacheHelper.mainCacheName).then(function (cache) {
        return cache.match(fetchRequest.request);
    }).then(function (response) {
        if (typeof response != "undefined") {
            if (Settings_1.Settings.debug)
                console.log("Service worker: fish versioned GET from cache " + fetchRequest.request.url);
            return response;
        }
        else
            return fetch(fetchRequest.request)
                .then(function (fetchResponse) {
                if (Settings_1.Settings.debug)
                    console.log("Service worker: load versioned GET from server " + fetchRequest.request.url);
                return CommonServerHandlers_1.HandleSuccessfulServerResponse(fetchRequest.request, fetchResponse);
            })["catch"](function (fetchResponse) {
                return CommonServerHandlers_1.HandleUnsuccessfulServerResponse(fetchRequest.request, fetchResponse);
            });
    }));
    //TARGET IS VERSIONED
    /*fetchRequest.respondWith(
        let mainCache = await caches.open(CacheHelper.mainCacheName);
        let cacheRes = await mainCache.match(fetchRequest.request);
        if (cacheRes)
            return cacheRes;
        return fetch(fetchRequest.request)
            .then(function (fetchResponse: Response)
            {
                return HandleSuccessfulServerResponse(fetchRequest.request, fetchResponse);
            })
            .catch(function (fetchResponse: Response)
            {
                return HandleUnsuccessfulServerResponse(fetchRequest.request, fetchResponse);
            });
    );*/
});
