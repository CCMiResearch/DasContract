exports.__esModule = true;
var LoadingAnimation = /** @class */ (function () {
    //--------------------------------------------------
    //---------LOCAL SHOW/HIDE--------------------------
    //--------------------------------------------------
    /**
     * Creates loading animation inside a target
     * @param targetElement
     */
    function LoadingAnimation(targetElement) {
        this.loadingAnimationElement = null;
        this.animationTimeout = -1;
        this.opened = false;
        this.targetElement = targetElement;
        var position = targetElement.style.position;
        if (position != "relative" && position != "fixed" && position != "absolute")
            targetElement.style.position = "relative";
    }
    /**
     * Shows the loading animation
     * */
    LoadingAnimation.prototype.Show = function () {
        if (this.opened)
            return;
        //Append new loading animation
        if (!this.loadingAnimationElement) {
            this.targetElement.insertAdjacentHTML("beforeend", LoadingAnimation.GenerateAnimationHTML());
            this.loadingAnimationElement = this.targetElement.querySelector(".loadingScreen");
        }
        //Show it
        if (this.animationTimeout != -1) {
            this.animationTimeout = -1;
            clearTimeout(this.animationTimeout);
        }
        this.loadingAnimationElement.style.display = "block";
        var object = this;
        setTimeout(function () {
            object.loadingAnimationElement.classList.add("show");
        }, 1);
        this.opened = true;
    };
    /**
     * Hides the loading animation
     * */
    LoadingAnimation.prototype.Hide = function () {
        if (!this.opened)
            return;
        //The animation does not exist
        if (!this.loadingAnimationElement)
            return;
        //Hide it
        if (this.animationTimeout != -1) {
            this.animationTimeout = -1;
            clearTimeout(this.animationTimeout);
        }
        this.loadingAnimationElement.classList.remove("show");
        var object = this;
        this.animationTimeout = setTimeout(function () {
            object.loadingAnimationElement.style.display = "none";
            object.animationTimeout = -1;
        }, 250);
        this.opened = false;
    };
    //--------------------------------------------------
    //---------HTML-------------------------------------
    //--------------------------------------------------
    /**
     * Generates animation HTML that should be appended
     * @param fullscreen Tells if it should generate HTML for fullscreen loading animation
     */
    LoadingAnimation.GenerateAnimationHTML = function (fullscreen) {
        if (fullscreen === void 0) { fullscreen = false; }
        return "<div id=\"" + (fullscreen ? "fullscreenLoadingScreen" : "") + "\" class=\"loadingScreen\">\n            <div class=\"loadingScreenAnimation\">\n                <div class=\"loadingScreenAnimationObject\">\n                  <div class=\"loadingDot loadingDot1\">&nbsp;</div>        \n                  <div class=\"loadingDot loadingDot2\">&nbsp;</div>        \n                  <div class=\"loadingDot loadingDot3\">&nbsp;</div>        \n                  <div class=\"loadingDot loadingDot4\">&nbsp;</div>   \n                  <div class=\"loadingDot loadingDot1x2\">&nbsp;</div>        \n                </div>\n            </div>\n        </div>";
    };
    //--------------------------------------------------
    //----------GLOBAL SHOW/HIDE------------------------
    //--------------------------------------------------
    /**
     * Show the loading animation
     * */
    LoadingAnimation.Show = function () {
        if (LoadingAnimation.opened)
            return;
        //Append new loading animation
        if (!LoadingAnimation.loadingAnimationElement) {
            var body = document.getElementsByTagName("body").item(0);
            //Parent position
            /*if (!body.style.position || body.style.position == "static")
                body.style.position = "relative";*/
            body.insertAdjacentHTML("beforeend", LoadingAnimation.GenerateAnimationHTML(true));
            LoadingAnimation.loadingAnimationElement = document.getElementById("fullscreenLoadingScreen");
        }
        //Show it
        if (LoadingAnimation.animationTimeout != -1) {
            LoadingAnimation.animationTimeout = -1;
            clearTimeout(LoadingAnimation.animationTimeout);
        }
        LoadingAnimation.loadingAnimationElement.style.display = "block";
        setTimeout(function () {
            LoadingAnimation.loadingAnimationElement.classList.add("show");
        }, 1);
        LoadingAnimation.opened = true;
    };
    /**
     * Hide the loading animation
     * */
    LoadingAnimation.Hide = function () {
        if (!LoadingAnimation.opened)
            return;
        //The animation does not exist
        if (!LoadingAnimation.loadingAnimationElement)
            return;
        //Hide it
        if (LoadingAnimation.animationTimeout != -1) {
            LoadingAnimation.animationTimeout = -1;
            clearTimeout(LoadingAnimation.animationTimeout);
        }
        LoadingAnimation.loadingAnimationElement.classList.remove("show");
        LoadingAnimation.animationTimeout = setTimeout(function () {
            LoadingAnimation.loadingAnimationElement.style.display = "none";
            LoadingAnimation.animationTimeout = -1;
        }, 250);
        LoadingAnimation.opened = false;
    };
    //--------------------------------------------------
    //----------VARIABLES-------------------------------
    //--------------------------------------------------
    LoadingAnimation.loadingAnimationElement = null;
    LoadingAnimation.animationTimeout = -1;
    LoadingAnimation.opened = false;
    return LoadingAnimation;
}());
exports.LoadingAnimation = LoadingAnimation;
