exports.__esModule = true;
var unit_test_1 = require("@drozdik.m/unit-test");
var BonsaiAsyncResponseProtocolMessage_1 = require("../src/BonsaiAsyncResponseProtocolMessage");
var unitTest = new unit_test_1.UnitTest("Bonsai Async Response Protocol");
unitTest.AddTestCase("FromJSON simple", function () {
    var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n            \"hasErrors\": false\n        },\n        \"content\": \"this-is-content\"\n    }");
    unit_test_1.Assert.AreEqual("1.0.0", message.GetVersion().toString());
    unit_test_1.Assert.IsFalse(message.HasErrors());
    unit_test_1.Assert.IsTrue(message.GetContent().IsDefined());
    unit_test_1.Assert.IsFalse(message.GetContent().IsEmpty());
    unit_test_1.Assert.AreEqual("this-is-content", message.GetContent().Content());
    unit_test_1.Assert.IsTrue(message.GetInfoChannel().IsEmpty());
    unit_test_1.Assert.IsTrue(message.GetErrorsChannel().IsEmpty());
    unit_test_1.Assert.IsTrue(message.GetWarningsChannel().IsEmpty());
    unit_test_1.Assert.IsTrue(message.GetSuccessesChannel().IsEmpty());
});
unitTest.AddTestCase("FromJSON wrong version", function () {
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"protocol\": \"barp\",\n            \"status\": {\n                \"hasErrors\": false\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_a) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"protocol\": \"barp\",\n            \"version\": \"0.0.0\",\n            \"status\": {\n                \"hasErrors\": false\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_b) {
    }
});
unitTest.AddTestCase("FromJSON wrong protocol", function () {
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"protocol\": \"XxX\",\n            \"version\": \"0.0.0\",\n            \"status\": {\n                \"hasErrors\": false\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_a) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"version\": \"1.0.0\",\n            \"status\": {\n                \"hasErrors\": false\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_b) {
    }
});
unitTest.AddTestCase("FromJSON missing error flag or status", function () {
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"protocol\": \"barp\",\n            \"version\": \"1.0.0\",\n            \"status\": {\n            \n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_a) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n            \"protocol\": \"barp\",\n            \"version\": \"1.0.0\",\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_b) {
    }
});
unitTest.AddTestCase("FromJSON channels", function () {
    var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n            \"hasErrors\": false,\n            \"infos\": {\n                \"messages\": [\"1\", \"2\"],\n                \"content\": \"this-is-content\"\n            },\n            \"successes\": {\n                \"messages\": [\"1\", \"2\"],\n                \"content\": \"this-is-content\"\n            },\n            \"warnings\": {\n                \"messages\": [\"1\", \"2\"],\n                \"content\": \"this-is-content\"\n            },\n            \"errors\": {\n                \"messages\": [\"1\", \"2\"],\n                \"content\": \"this-is-content\"\n            }\n        }\n    }");
    unit_test_1.Assert.AreEqual("1.0.0", message.GetVersion().toString());
    unit_test_1.Assert.IsFalse(message.HasErrors());
    unit_test_1.Assert.IsFalse(message.GetContent().IsDefined());
    unit_test_1.Assert.IsTrue(message.GetContent().IsEmpty());
    unit_test_1.Assert.IsFalse(message.GetInfoChannel().IsEmpty());
    unit_test_1.Assert.IsFalse(message.GetErrorsChannel().IsEmpty());
    unit_test_1.Assert.IsFalse(message.GetWarningsChannel().IsEmpty());
    unit_test_1.Assert.IsFalse(message.GetSuccessesChannel().IsEmpty());
    unit_test_1.Assert.AreEqual("infos", message.GetInfoChannel().Get().GetChannelName());
    unit_test_1.Assert.AreEqual("this-is-content", message.GetInfoChannel().Get().GetContent());
    unit_test_1.Assert.AreEqual("1", message.GetInfoChannel().Get().GetMessages()[0]);
    unit_test_1.Assert.AreEqual("2", message.GetInfoChannel().Get().GetMessages()[1]);
    unit_test_1.Assert.AreEqual("errors", message.GetErrorsChannel().Get().GetChannelName());
    unit_test_1.Assert.AreEqual("this-is-content", message.GetErrorsChannel().Get().GetContent());
    unit_test_1.Assert.AreEqual("1", message.GetErrorsChannel().Get().GetMessages()[0]);
    unit_test_1.Assert.AreEqual("2", message.GetErrorsChannel().Get().GetMessages()[1]);
    unit_test_1.Assert.AreEqual("successes", message.GetSuccessesChannel().Get().GetChannelName());
    unit_test_1.Assert.AreEqual("this-is-content", message.GetSuccessesChannel().Get().GetContent());
    unit_test_1.Assert.AreEqual("1", message.GetSuccessesChannel().Get().GetMessages()[0]);
    unit_test_1.Assert.AreEqual("2", message.GetSuccessesChannel().Get().GetMessages()[1]);
    unit_test_1.Assert.AreEqual("warnings", message.GetWarningsChannel().Get().GetChannelName());
    unit_test_1.Assert.AreEqual("this-is-content", message.GetWarningsChannel().Get().GetContent());
    unit_test_1.Assert.AreEqual("1", message.GetWarningsChannel().Get().GetMessages()[0]);
    unit_test_1.Assert.AreEqual("2", message.GetWarningsChannel().Get().GetMessages()[1]);
});
unitTest.AddTestCase("FromJSON wrong channels", function () {
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n                \"hasErrors\": false,\n                \"infos\": {\n                    \"content\": \"this-is-content\"\n                }\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_a) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n                \"hasErrors\": false,\n                \"successes\": {\n                    \"content\": \"this-is-content\"\n                }\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_b) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n                \"hasErrors\": false,\n                \"warnings\": {\n                    \"content\": \"this-is-content\"\n                }\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_c) {
    }
    try {
        var message = BonsaiAsyncResponseProtocolMessage_1.BonsaiAsyncResponseProtocolMessage.FromJSON("{\n        \"protocol\": \"barp\",\n        \"version\": \"1.0.0\",\n        \"status\": {\n                \"hasErrors\": false,\n                \"errors\": {\n                    \"content\": \"this-is-content\"\n                }\n            },\n            \"content\": \"this-is-content\"\n        }");
        unit_test_1.Assert.Fail();
    }
    catch (_d) {
    }
});
unitTest.Run();
