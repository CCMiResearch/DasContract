exports.__esModule = true;
var double_linked_list_1 = require("@drozdik.m/double-linked-list");
var Queue = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    function Queue() {
        //--------------------------------------------------
        //----------ATTRIBUTES------------------------------
        //--------------------------------------------------
        //List storage
        this.queueList = new double_linked_list_1.List();
    }
    //--------------------------------------------------
    //----------FIRST AND LAST--------------------------
    //--------------------------------------------------
    /**
    * Returns the first element in the queue
    * @returns Value at the front
    */
    Queue.prototype.Front = function () {
        if (this.IsEmpty())
            return null;
        return this.queueList.First().Value();
    };
    /**
    * Returns the last element in the queue
    * @returns Value at the back
    */
    Queue.prototype.Back = function () {
        if (this.IsEmpty())
            return null;
        return this.queueList.Last().Value();
    };
    //--------------------------------------------------
    //----------INSERT/REMOVE---------------------------
    //--------------------------------------------------
    /**
     * Adds item to the queue (to the back)
     * @param value Value to add
     */
    Queue.prototype.Enqueue = function (value) {
        this.queueList.Insert(value);
    };
    /**
    * Removes the first element in the queue (the front one)
    */
    Queue.prototype.Dequeue = function () {
        if (!this.IsEmpty()) {
            var res = this.queueList.First().Value();
            this.queueList.RemoveAt(this.queueList.First());
            return res;
        }
        this.queueList.RemoveAt(this.queueList.First());
        return null;
    };
    //--------------------------------------------------
    //----------CLEAR AND DISPOSE-----------------------
    //--------------------------------------------------
    Queue.prototype.Clear = function () {
        this.queueList.Clear();
    };
    Queue.prototype.Dispose = function () {
        this.Clear();
    };
    //--------------------------------------------------
    //----------COUNT-----------------------------------
    //--------------------------------------------------
    Queue.prototype.Count = function () {
        return this.queueList.Count();
    };
    Queue.prototype.IsEmpty = function () {
        return this.queueList.IsEmpty();
    };
    //--------------------------------------------------
    //----------CLONE-----------------------------------
    //--------------------------------------------------
    Queue.prototype.Clone = function () {
        var res = new Queue();
        res.queueList = this.queueList.Clone();
        return res;
    };
    return Queue;
}());
exports.Queue = Queue;
