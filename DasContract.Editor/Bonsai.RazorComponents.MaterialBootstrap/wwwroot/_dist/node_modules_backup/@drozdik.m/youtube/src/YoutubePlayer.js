exports.__esModule = true;
var event_1 = require("@drozdik.m/event");
var YoutubePlayerStateArgs_1 = require("../args/YoutubePlayerStateArgs");
var YoutubeStates_1 = require("./YoutubeStates");
var YoutubeAPI_1 = require("./YoutubeAPI");
//--------------------------------------------------
//----------YOUTUBE PLAYER--------------------------
//--------------------------------------------------
var YoutubePlayer = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    /**
     * Creates new YouTube player
     * @param playerId Target element ID
     * @param startingVideoId Starting video ID
     */
    function YoutubePlayer(playerId, startingVideoId) {
        if (startingVideoId === void 0) { startingVideoId = "8tPnX7OPo0Q"; }
        //--------------------------------------------------
        //----------VARIABLES-------------------------------
        //--------------------------------------------------
        //Youtube player object
        this.youtubePlayer = null;
        //Player settings
        this.startingVideoId = "";
        this.currentVideoId = "";
        //Player id
        this.playerId = "";
        //Events callback
        this.OnReady = new event_1.Event();
        this.OnStateChange = new event_1.Event();
        this.OnError = new event_1.Event();
        this.OnStateChangeENDED = new event_1.Event();
        this.OnStateChangePLAYING = new event_1.Event();
        this.OnStateChangePAUSED = new event_1.Event();
        this.OnStateChangeBUFFERING = new event_1.Event();
        this.OnStateChangeCUED = new event_1.Event();
        //State
        this.state = YoutubeStates_1.YoutubePlayerState.NotReady;
        this.playerId = playerId;
        this.startingVideoId = startingVideoId;
        this.currentVideoId = this.startingVideoId;
        //Check element existance
        var player = document.getElementById(this.playerId);
        //Exepcetion
        if (!player) {
            console.error("YoutubePlayer(#" + playerId + ") - element with that id does not exists");
            return;
        }
        var object = this;
        YoutubeAPI_1.YoutubeAPI.Load().Then(function () {
            object.InitPlayer();
        });
    }
    /**
     * Initiates the player using YouTube API
     * */
    YoutubePlayer.prototype.InitPlayer = function () {
        //Initialize Youtube player
        var object = this;
        this.youtubePlayer = new YT.Player(object.playerId, {
            host: 'https://www.youtube.com',
            videoId: object.startingVideoId,
            events: {
                "onReady": function () {
                    object.YoutubePlayerReady();
                },
                "onStateChange": function (event) {
                    object.YoutubePlayerStateChange(event);
                },
                "onError": function (event) {
                    object.YoutubePlayerError(event);
                }
            }
        });
    };
    //--------------------------------------------------
    //----------API CALLBACKS---------------------------
    //--------------------------------------------------
    /**
    * On youtube player ready
    */
    YoutubePlayer.prototype.YoutubePlayerReady = function () {
        this.state = YoutubeStates_1.YoutubePlayerState.Ready;
        //Callback
        this.OnReady.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
    };
    /**
     * On youtube player state change
     * @param event Event object
     */
    YoutubePlayer.prototype.YoutubePlayerStateChange = function (event) {
        //Exceptions
        if (this.state == YoutubeStates_1.YoutubePlayerState.NotReady) {
            console.error("YoutubePlayer.YoutubePlayerStateChange() - iframe is not ready yet");
            return;
        }
        //STATES
        if (event.data == YT.PlayerState.ENDED) {
            this.state = YoutubeStates_1.YoutubePlayerState.Ended;
            this.OnStateChangeENDED.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
        }
        else if (event.data == YT.PlayerState.PLAYING) {
            this.state = YoutubeStates_1.YoutubePlayerState.Playing;
            this.OnStateChangePLAYING.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
        }
        else if (event.data == YT.PlayerState.PAUSED) {
            this.state = YoutubeStates_1.YoutubePlayerState.Paused;
            this.OnStateChangePAUSED.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
        }
        else if (event.data == YT.PlayerState.BUFFERING) {
            this.state = YoutubeStates_1.YoutubePlayerState.Buffering;
            this.OnStateChangeBUFFERING.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
        }
        else if (event.data == YT.PlayerState.CUED) {
            this.state = YoutubeStates_1.YoutubePlayerState.Cued;
            this.OnStateChangeCUED.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
        }
        //Callback
        this.OnStateChange.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
    };
    /**
     * On youtube player error
     * @param event Error info
     */
    YoutubePlayer.prototype.YoutubePlayerError = function (event) {
        //Throw the error
        console.error("Youtube player with id #" + this.playerId + " encountered an error: ");
        console.log(event);
        //Callback
        this.OnError.Invoke(this, new YoutubePlayerStateArgs_1.YoutubePlayerStateArgs(this.currentVideoId, this.state));
    };
    //--------------------------------------------------
    //----------CONTROLS--------------------------------
    //--------------------------------------------------
    /**
     * Load new video
     * @param videoId Id of the video
     */
    YoutubePlayer.prototype.Load = function (videoId) {
        //Exceptions
        if (this.state == YoutubeStates_1.YoutubePlayerState.NotReady) {
            console.error("YoutubePlayer.Load() - iframe is not ready yet");
            return;
        }
        //Load the video
        this.currentVideoId = videoId;
        this.youtubePlayer.loadVideoById(videoId);
    };
    /**
    * Play loaded video
    */
    YoutubePlayer.prototype.Play = function () {
        this.youtubePlayer.playVideo();
    };
    /**
    * Stop loaded video
    */
    YoutubePlayer.prototype.Stop = function () {
        this.youtubePlayer.stopVideo();
    };
    /**
    * Pause loaded video
    */
    YoutubePlayer.prototype.Pause = function () {
        this.youtubePlayer.pauseVideo();
    };
    /**
     * Returns youtube player state
     * */
    YoutubePlayer.prototype.GetState = function () {
        return this.state;
    };
    return YoutubePlayer;
}());
exports.YoutubePlayer = YoutubePlayer;
