exports.__esModule = true;
var queue_1 = require("@drozdik.m/queue");
var AjaxRequest_1 = require("./AjaxRequest");
var event_1 = require("@drozdik.m/event");
var pipeline_1 = require("@drozdik.m/pipeline");
var AjaxProgressArgs_1 = require("../args/AjaxProgressArgs");
exports.AjaxProgressArgs = AjaxProgressArgs_1.AjaxProgressArgs;
var AjaxParameter_1 = require("./AjaxParameter");
exports.AjaxParameter = AjaxParameter_1.AjaxParameter;
var HTTPMethod_1 = require("./HTTPMethod");
var AjaxError_1 = require("../errors/AjaxError");
var AjaxResponse_1 = require("./AjaxResponse");
exports.AjaxResponse = AjaxResponse_1.AjaxResponse;
var AjaxResponseArgs_1 = require("../args/AjaxResponseArgs");
exports.AjaxResponseArgs = AjaxResponseArgs_1.AjaxResponseArgs;
var AjaxSendArgs_1 = require("../args/AjaxSendArgs");
var Ajax = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    function Ajax() {
        //--------------------------------------------------
        //----------VARIABLES-------------------------------
        //--------------------------------------------------
        this.requestsQueue = new queue_1.Queue();
        this.requestInProgress = false;
        //EVENTS
        this.OnSuccess = new event_1.Event();
        this.OnError = new event_1.Event();
        this.OnFinish = new event_1.Event();
        this.OnProgress = new event_1.Event();
        this.OnSendSuccess = new event_1.Event();
        this.OnSendError = new event_1.Event();
        this.OnSendFinish = new event_1.Event();
        this.OnSendProgress = new event_1.Event();
    }
    //--------------------------------------------------
    //---------QUEUE------------------------------------
    //--------------------------------------------------
    /**
     * Checks if there are some requests in the queue and runs the request
     * */
    Ajax.prototype.UpdateRequestQueue = function () {
        //The queue is empty
        if (this.requestsQueue.IsEmpty() || this.requestInProgress)
            return;
        //Set flag
        this.requestInProgress = true;
        //Create and initiate request
        var ajaxRequest = this.requestsQueue.Dequeue();
        var request = ajaxRequest.GetXMLHttpRequest();
        var object = this;
        //On load
        request.upload.onload = function () {
            object.LoadSuccess(ajaxRequest);
        };
        request.onload = function () {
            var response = new AjaxResponse_1.AjaxResponse(request.status, request.statusText, request.responseText);
            if (response.IsError())
                object.ResponseError(ajaxRequest, response);
            else
                object.ResponseSuccess(ajaxRequest, response);
        };
        //On error
        request.upload.onerror = function () {
            object.LoadError(ajaxRequest);
        };
        request.onerror = function () {
            object.ResponseError(ajaxRequest, new AjaxResponse_1.AjaxResponse(-1, "Non-HTTP(s) error", ""));
        };
        //On progress
        request.upload.onprogress = function (event) {
            var args = new AjaxProgressArgs_1.AjaxProgressArgs(event.lengthComputable, event.loaded, event.lengthComputable ? event.total : -1);
            object.OnSendProgressRequest(args);
        };
        request.onprogress = function (event) {
            var args = new AjaxProgressArgs_1.AjaxProgressArgs(event.lengthComputable, event.loaded, event.lengthComputable ? event.total : -1);
            object.OnProgressRequest(args);
        };
        //FIRE
        if (ajaxRequest.HasBody())
            request.send(ajaxRequest.GetBody());
        else
            request.send();
    };
    /**
     * Enqueues new request and runs the queue
     * @param request New request
     */
    Ajax.prototype.EnqueueRequest = function (request) {
        this.requestsQueue.Enqueue(request);
        this.UpdateRequestQueue();
    };
    //--------------------------------------------------
    //---------CALLBACKS--------------------------------
    //--------------------------------------------------
    /**
     * Called on load success
     * @param request Arguments
     */
    Ajax.prototype.LoadSuccess = function (request) {
        this.OnSendSuccess.Invoke(this, new AjaxSendArgs_1.AjaxSendArgs());
        this.OnSendFinish.Invoke(this, new AjaxSendArgs_1.AjaxSendArgs());
    };
    /**
     * Called on load error
     * @param request Arguments
     */
    Ajax.prototype.LoadError = function (request) {
        this.OnSendError.Invoke(this, new AjaxSendArgs_1.AjaxSendArgs());
        this.OnSendFinish.Invoke(this, new AjaxSendArgs_1.AjaxSendArgs());
    };
    /**
     * Called on load progress
     * @param args Arguments
     */
    Ajax.prototype.OnSendProgressRequest = function (args) {
        this.OnSendProgress.Invoke(this, args);
    };
    /**
     * Called on response success
     * @param response Arguments
     */
    Ajax.prototype.ResponseSuccess = function (request, response) {
        //Call callbacks
        request.InvokeSuccessCallback(response);
        //Call the events
        this.OnSuccess.Invoke(this, new AjaxResponseArgs_1.AjaxResponseArgs(response));
        this.OnFinish.Invoke(this, new AjaxResponseArgs_1.AjaxResponseArgs(response));
        //Continue the queue
        this.requestInProgress = false;
        this.UpdateRequestQueue();
    };
    /**
     * Called on response error (http and non-http)
     * @param response Arguments
     */
    Ajax.prototype.ResponseError = function (request, response) {
        //Call callbacks
        request.InvokeErrorCallback(response);
        //Call the events
        this.OnError.Invoke(this, new AjaxResponseArgs_1.AjaxResponseArgs(response));
        this.OnFinish.Invoke(this, new AjaxResponseArgs_1.AjaxResponseArgs(response));
        //Continue the queue
        this.requestInProgress = false;
        this.UpdateRequestQueue();
    };
    /**
     * Called on response update
     * @param args Arguments
     */
    Ajax.prototype.OnProgressRequest = function (args) {
        //Call the events
        this.OnProgress.Invoke(this, args);
    };
    //--------------------------------------------------
    //---------METHODS----------------------------------
    //--------------------------------------------------
    /**
     * Enqueues HTTP GET request
     * @param url Target URL
     * @param parameters Target parameters
     */
    Ajax.prototype.Get = function (url, parameters, body) {
        if (parameters === void 0) { parameters = []; }
        if (body === void 0) { body = null; }
        var object = this;
        return new pipeline_1.Pipeline(function (resolver, rejector) {
            object.EnqueueRequest(new AjaxRequest_1.AjaxRequest(HTTPMethod_1.HTTPMethod.GET, url, parameters, body, function (response) {
                //Success
                resolver(response);
            }, function (response) {
                //Error
                rejector(new AjaxError_1.AjaxError(response.Status(), response.StatusText()));
            }));
        });
    };
    /**
     * Enqueues HTTP POST request
     * @param url Target URL
     * @param parameters Target parameters
     */
    Ajax.prototype.Post = function (url, parameters, body) {
        if (parameters === void 0) { parameters = []; }
        if (body === void 0) { body = null; }
        var object = this;
        return new pipeline_1.Pipeline(function (resolver, rejector) {
            object.EnqueueRequest(new AjaxRequest_1.AjaxRequest(HTTPMethod_1.HTTPMethod.POST, url, parameters, body, function (response) {
                //Success
                resolver(response);
            }, function (response) {
                //Error
                rejector(new AjaxError_1.AjaxError(response.Status(), response.StatusText()));
            }));
        });
    };
    return Ajax;
}());
exports.Ajax = Ajax;
