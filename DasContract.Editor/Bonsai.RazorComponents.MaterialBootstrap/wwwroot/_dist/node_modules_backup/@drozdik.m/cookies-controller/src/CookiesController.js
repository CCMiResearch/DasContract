exports.__esModule = true;
var cookie_1 = require("@drozdik.m/cookie");
var event_1 = require("@drozdik.m/event");
var CookiesPermissionChangeArgs_1 = require("../args/CookiesPermissionChangeArgs");
exports.CookiesPermissionChangeArgs = CookiesPermissionChangeArgs_1.CookiesPermissionChangeArgs;
var CookiesController = /** @class */ (function () {
    //--------------------------------------------------
    //---------CONSTRUCTOR------------------------------
    //--------------------------------------------------
    function CookiesController() {
        //--------------------------------------------------
        //----------PROPERTIES------------------------------
        //--------------------------------------------------
        //List of cookies
        this.cookiesList = [];
        //Cookies permission
        this.permissionCookie = new cookie_1.Cookie("TermsAndConditions");
        this.permission = false;
        //Callbacks
        this.OnPermit = new event_1.Event();
        this.OnForbid = new event_1.Event();
        //If the cookie does not exist, set it to false
        if (!this.permissionCookie.Exists())
            this.permissionCookie.Set("false");
        //If cookie is true, permit
        if (this.permissionCookie.Get() == "true")
            this.Permit();
        else
            this.Forbid();
    }
    //--------------------------------------------------
    //----------DELETE/ADD------------------------------
    //--------------------------------------------------
    /**
     * Adds a cookie to a container of the controller
     * @param cookie Cookie to add
     */
    CookiesController.prototype.Add = function (cookie) {
        this.cookiesList.push(cookie);
    };
    /**
     * Removes all cookies from this controller. Does not change their values.
     * */
    CookiesController.prototype.RemoveAll = function () {
        this.cookiesList = [];
    };
    /**
    * Deletes all held cookies (their values).
    */
    CookiesController.prototype.DeleteAll = function () {
        //List all cookies and delete them
        for (var i = 0; i < this.cookiesList.length; i++)
            this.cookiesList[i].Delete();
    };
    //--------------------------------------------------
    //----------PERMISSION------------------------------
    //--------------------------------------------------
    /**
    * Forbid cookies
    */
    CookiesController.prototype.Forbid = function () {
        this.DeleteAll();
        this.permissionCookie.Set("false");
        this.permission = false;
        this.OnForbid.Invoke(this, new CookiesPermissionChangeArgs_1.CookiesPermissionChangeArgs());
    };
    /**
    * Permit cookies
    */
    CookiesController.prototype.Permit = function () {
        this.permissionCookie.Set("true");
        this.permission = true;
        this.OnPermit.Invoke(this, new CookiesPermissionChangeArgs_1.CookiesPermissionChangeArgs());
    };
    /**
    * Returns if it is allowed to use cookies
    * @returns True if cookies are allowed
    */
    CookiesController.prototype.AllowedToUse = function () {
        return this.permission;
    };
    return CookiesController;
}());
exports.CookiesController = CookiesController;
