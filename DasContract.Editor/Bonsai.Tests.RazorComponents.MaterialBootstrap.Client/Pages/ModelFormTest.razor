@page "/modelform"

@code {
    public bool Loading { get; set; } = false;
    public bool ReadOnly { get; set; } = false;

    class ValueInputTestFoo
    {
        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        [MaxLength(10, ErrorMessage = "Cant be longer than {1} characters")]
        public string FooString { get; set; } = "Foo";

        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        public int FooInt { get; set; }

        [DisplayName("Nullable number")]
        public int? FooIntNull { get; set; } = null;

        [DisplayName("Nullable number2")]
        public int? FooIntNull2 { get; set; } = null;

        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        public bool FooBool { get; set; } = true;

        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        public ValueInputEnum FooEnum { get; set; }

        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        public DateTime FooDate { get; set; }

        [DisplayName("Nullable date")]
        [Description("This is description")]
        public DateTime? FooDateNull { get; set; }
    }

    ValueInputTestFoo Model { get; set; } = new ValueInputTestFoo();

    enum ValueInputEnum
    {
        [Display(Name = "Option 1")]
        Foo1,
        Foo2
    }

    ValueInputTestFooInner ModelInner { get; set; } = new ValueInputTestFooInner();
    class ValueInputTestFooInner
    {
        [DisplayName("This is foo")]
        [Description("This is description")]
        [Required(ErrorMessage = "Must be filled")]
        public int FooInt { get; set; }
    }

    public int ResetCount { get; set; } = 0;
    public int ValidSubmitCount { get; set; } = 0;
}

<h1>ModelForm Test</h1>

<div class="my-5">
    <input type="button" value="Loading: true" @onclick="@(e => { Loading = true; })" />
    <input type="button" value="Loading: false" @onclick="@(e => { Loading = false; })" />
</div>

<div class="my-5">
    <input type="button" value="ReadOnly: true" @onclick="@(e => { ReadOnly = true; })" />
    <input type="button" value="ReadOnly: false" @onclick="@(e => { ReadOnly = false; })" />
</div>

<div class="my-5">
    <p>ResetCount: @ResetCount</p>
    <p>ValidSubmitCount @ValidSubmitCount</p>
</div>

<h2>Model form 1</h2>
<ModelForm Model="Model" Loading="Loading" ReadOnly="ReadOnly"
           OnReset="@(() => { ResetCount++; StateHasChanged(); })"
           OnValidSubmit="@(() => { ValidSubmitCount++; StateHasChanged(); })">
    <Inputs>
        <TextValueInput PropertyExpression="@(() => Model.FooString)"
                        @bind-Value="@Model.FooString" />

        <NumberValueInput PropertyExpression="@(() => Model.FooInt)"
                          @bind-Value="@Model.FooInt" />
    </Inputs>
    <Buttons>
        <p>Extra buttons</p>
    </Buttons>
</ModelForm>

<h2>Model form 2</h2>
<ModelForm Model="Model" Loading="Loading" ReadOnly="ReadOnly"
           OnValidSubmit="@(() => { ValidSubmitCount++; StateHasChanged(); })">
    <Inputs>
        <TextValueInput Id="yxxcasfkuibjnfasd"
                        PropertyExpression="@(() => Model.FooString)"
                        @bind-Value="@Model.FooString" />

        <NumberValueInput Id="sdlkfnsdf"
                          PropertyExpression="@(() => Model.FooInt)"
                          @bind-Value="@Model.FooInt" />
    </Inputs>
    <Buttons>
        <ValidationSummary />
    </Buttons>
</ModelForm>