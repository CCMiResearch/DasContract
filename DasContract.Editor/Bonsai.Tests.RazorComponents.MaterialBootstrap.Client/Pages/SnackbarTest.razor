@page "/snackbar"


@code {
    int OpenCount = 0;
    int CloseCount = 0;

    Snackbar autohideSnackbar;
    Snackbar manualSnackbar;
    Snackbar toast;
}

<h1>Alert test</h1>
<p>Open count: @OpenCount</p>
<p>Close count: @CloseCount</p>

<div class="my-5">
    <h2>Autohide</h2>
    <ButtonInput OnClick="@(async () => { await autohideSnackbar.ShowAsync(); })">Show</ButtonInput>
    <ButtonInput OnClick="@(async () => { await autohideSnackbar.HideAsync(); })">Hide</ButtonInput>
    <ButtonInput OnClick="@(async () => { await autohideSnackbar.ToggleAsync(); })">Toggle</ButtonInput>

    <Snackbar @ref="autohideSnackbar" Content="Oh, hello there"
              OnClose="@(() => { CloseCount++; StateHasChanged(); })"
              OnOpen="@(() => { OpenCount++; StateHasChanged(); })" />
</div>

<div class="my-5">
    <h2>Manual</h2>
    <ButtonInput OnClick="@(async () => { await manualSnackbar.ShowAsync(); })">Show</ButtonInput>
    <ButtonInput OnClick="@(async () => { await manualSnackbar.HideAsync(); })">Hide</ButtonInput>
    <ButtonInput OnClick="@(async () => { await manualSnackbar.ToggleAsync(); })">Toggle</ButtonInput>

    <Snackbar AutoHide="false" @ref="manualSnackbar" Content="Oh, hello there"
              OnClose="@(() => { CloseCount++; StateHasChanged(); })"
              OnOpen="@(() => { OpenCount++; StateHasChanged(); })" />
</div>

<div class="my-5">
    <h2>Toast</h2>
    <ButtonInput OnClick="@(async () => { await toast.ShowAsync(); })">Show</ButtonInput>
    <ButtonInput OnClick="@(async () => { await toast.HideAsync(); })">Hide</ButtonInput>
    <ButtonInput OnClick="@(async () => { await toast.ToggleAsync(); })">Toggle</ButtonInput>

    <Snackbar Type="SnackbarType.Toast"
              AutoHide="false" @ref="toast" Content="Oh, hello there"
              OnClose="@(() => { CloseCount++; StateHasChanged(); })"
              OnOpen="@(() => { OpenCount++; StateHasChanged(); })" />
</div>



