{"version":3,"sources":["../src/Viewer.js"],"names":["Manager","DrdViewer","DecisionTableViewer","LiteralExpressionViewer","is","containsDi","Viewer","id","constructor","opens","element","decisionLogic"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,gCAApB;AAEA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,uBAAP,MAAoC,sCAApC;AAEA,SAASC,EAAT,QAAmB,kCAAnB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAGA;;;;IAGqBC,M;;;;;;;;;;;;;wCAEC;AAElB,aAAO,CACL;AACEC,QAAAA,EAAE,EAAE,KADN;AAEEC,QAAAA,WAAW,EAAEP,SAFf;AAGEQ,QAAAA,KAHF,iBAGQC,OAHR,EAGiB;AACb,iBAAON,EAAE,CAACM,OAAD,EAAU,iBAAV,CAAF,IAAkCL,UAAU,CAACK,OAAD,CAAnD;AACD;AALH,OADK,EAQL;AACEH,QAAAA,EAAE,EAAE,eADN;AAEEC,QAAAA,WAAW,EAAEN,mBAFf;AAGEO,QAAAA,KAHF,iBAGQC,OAHR,EAGiB;AACb,iBACEN,EAAE,CAACM,OAAD,EAAU,cAAV,CAAF,IACAN,EAAE,CAACM,OAAO,CAACC,aAAT,EAAwB,mBAAxB,CAFJ;AAID;AARH,OARK,EAkBL;AACEJ,QAAAA,EAAE,EAAE,mBADN;AAEEC,QAAAA,WAAW,EAAEL,uBAFf;AAGEM,QAAAA,KAHF,iBAGQC,OAHR,EAGiB;AACb,iBACEN,EAAE,CAACM,OAAD,EAAU,cAAV,CAAF,IACAN,EAAE,CAACM,OAAO,CAACC,aAAT,EAAwB,uBAAxB,CAFJ;AAID;AARH,OAlBK,CAAP;AA8BD;;;;EAlCiCX,O;;SAAfM,M","sourcesContent":["import Manager from 'dmn-js-shared/lib/base/Manager';\n\nimport DrdViewer from 'dmn-js-drd/lib/Viewer';\nimport DecisionTableViewer from 'dmn-js-decision-table/lib/Viewer';\nimport LiteralExpressionViewer from 'dmn-js-literal-expression/lib/Viewer';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\nimport { containsDi } from 'dmn-js-shared/lib/util/DiUtil';\n\n\n/**\n * The dmn viewer.\n */\nexport default class Viewer extends Manager {\n\n  _getViewProviders() {\n\n    return [\n      {\n        id: 'drd',\n        constructor: DrdViewer,\n        opens(element) {\n          return is(element, 'dmn:Definitions') && containsDi(element);\n        }\n      },\n      {\n        id: 'decisionTable',\n        constructor: DecisionTableViewer,\n        opens(element) {\n          return (\n            is(element, 'dmn:Decision') &&\n            is(element.decisionLogic, 'dmn:DecisionTable')\n          );\n        }\n      },\n      {\n        id: 'literalExpression',\n        constructor: LiteralExpressionViewer,\n        opens(element) {\n          return (\n            is(element, 'dmn:Decision') &&\n            is(element.decisionLogic, 'dmn:LiteralExpression')\n          );\n        }\n      }\n    ];\n\n  }\n\n}"],"file":"Viewer.js"}